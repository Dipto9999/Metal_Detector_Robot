0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Fri Mar 22 17:02:50 2024
0000              5   ;--------------------------------------------------------
                  5   $name testmovement
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _movement_manager
0000             28            public _right
0000             29            public _left
0000             30            public _backward
0000             31            public _straight
0000             32            public _idle
0000             33            public _Timer0_ISR
0000             34            public _TIMER0_Init
0000             35            public __c51_external_startup
0000             36            public _movement_manager_PARM_5
0000             37            public _movement_manager_PARM_4
0000             38            public _movement_manager_PARM_3
0000             39            public _movement_manager_PARM_2
0000             40            public _prev_PWM_percent_y
0000             41            public _prev_PWM_percent_x
0000             42            public _PWM_percent_x
0000             43            public _PWM_percent_y
0000             44            public _state
0000             45            public _count
0000             46   ;--------------------------------------------------------
0000             47   ; Special Function Registers
0000             48   ;--------------------------------------------------------
0000             49   _ACC            DATA 0xe0
0000             50   _ADC0ASAH       DATA 0xb6
0000             51   _ADC0ASAL       DATA 0xb5
0000             52   _ADC0ASCF       DATA 0xa1
0000             53   _ADC0ASCT       DATA 0xc7
0000             54   _ADC0CF0        DATA 0xbc
0000             55   _ADC0CF1        DATA 0xb9
0000             56   _ADC0CF2        DATA 0xdf
0000             57   _ADC0CN0        DATA 0xe8
0000             58   _ADC0CN1        DATA 0xb2
0000             59   _ADC0CN2        DATA 0xb3
0000             60   _ADC0GTH        DATA 0xc4
0000             61   _ADC0GTL        DATA 0xc3
0000             62   _ADC0H          DATA 0xbe
0000             63   _ADC0L          DATA 0xbd
0000             64   _ADC0LTH        DATA 0xc6
0000             65   _ADC0LTL        DATA 0xc5
0000             66   _ADC0MX         DATA 0xbb
0000             67   _B              DATA 0xf0
0000             68   _CKCON0         DATA 0x8e
0000             69   _CKCON1         DATA 0xa6
0000             70   _CLEN0          DATA 0xc6
0000             71   _CLIE0          DATA 0xc7
0000             72   _CLIF0          DATA 0xe8
0000             73   _CLKSEL         DATA 0xa9
0000             74   _CLOUT0         DATA 0xd1
0000             75   _CLU0CF         DATA 0xb1
0000             76   _CLU0FN         DATA 0xaf
0000             77   _CLU0MX         DATA 0x84
0000             78   _CLU1CF         DATA 0xb3
0000             79   _CLU1FN         DATA 0xb2
0000             80   _CLU1MX         DATA 0x85
0000             81   _CLU2CF         DATA 0xb6
0000             82   _CLU2FN         DATA 0xb5
0000             83   _CLU2MX         DATA 0x91
0000             84   _CLU3CF         DATA 0xbf
0000             85   _CLU3FN         DATA 0xbe
0000             86   _CLU3MX         DATA 0xae
0000             87   _CMP0CN0        DATA 0x9b
0000             88   _CMP0CN1        DATA 0x99
0000             89   _CMP0MD         DATA 0x9d
0000             90   _CMP0MX         DATA 0x9f
0000             91   _CMP1CN0        DATA 0xbf
0000             92   _CMP1CN1        DATA 0xac
0000             93   _CMP1MD         DATA 0xab
0000             94   _CMP1MX         DATA 0xaa
0000             95   _CRC0CN0        DATA 0xce
0000             96   _CRC0CN1        DATA 0x86
0000             97   _CRC0CNT        DATA 0xd3
0000             98   _CRC0DAT        DATA 0xcb
0000             99   _CRC0FLIP       DATA 0xcf
0000            100   _CRC0IN         DATA 0xca
0000            101   _CRC0ST         DATA 0xd2
0000            102   _DAC0CF0        DATA 0x91
0000            103   _DAC0CF1        DATA 0x92
0000            104   _DAC0H          DATA 0x85
0000            105   _DAC0L          DATA 0x84
0000            106   _DAC1CF0        DATA 0x93
0000            107   _DAC1CF1        DATA 0x94
0000            108   _DAC1H          DATA 0x8a
0000            109   _DAC1L          DATA 0x89
0000            110   _DAC2CF0        DATA 0x95
0000            111   _DAC2CF1        DATA 0x96
0000            112   _DAC2H          DATA 0x8c
0000            113   _DAC2L          DATA 0x8b
0000            114   _DAC3CF0        DATA 0x9a
0000            115   _DAC3CF1        DATA 0x9c
0000            116   _DAC3H          DATA 0x8e
0000            117   _DAC3L          DATA 0x8d
0000            118   _DACGCF0        DATA 0x88
0000            119   _DACGCF1        DATA 0x98
0000            120   _DACGCF2        DATA 0xa2
0000            121   _DERIVID        DATA 0xad
0000            122   _DEVICEID       DATA 0xb5
0000            123   _DPH            DATA 0x83
0000            124   _DPL            DATA 0x82
0000            125   _EIE1           DATA 0xe6
0000            126   _EIE2           DATA 0xf3
0000            127   _EIP1           DATA 0xbb
0000            128   _EIP1H          DATA 0xee
0000            129   _EIP2           DATA 0xed
0000            130   _EIP2H          DATA 0xf6
0000            131   _EMI0CN         DATA 0xe7
0000            132   _FLKEY          DATA 0xb7
0000            133   _HFO0CAL        DATA 0xc7
0000            134   _HFO1CAL        DATA 0xd6
0000            135   _HFOCN          DATA 0xef
0000            136   _I2C0ADM        DATA 0xff
0000            137   _I2C0CN0        DATA 0xba
0000            138   _I2C0DIN        DATA 0xbc
0000            139   _I2C0DOUT       DATA 0xbb
0000            140   _I2C0FCN0       DATA 0xad
0000            141   _I2C0FCN1       DATA 0xab
0000            142   _I2C0FCT        DATA 0xf5
0000            143   _I2C0SLAD       DATA 0xbd
0000            144   _I2C0STAT       DATA 0xb9
0000            145   _IE             DATA 0xa8
0000            146   _IP             DATA 0xb8
0000            147   _IPH            DATA 0xf2
0000            148   _IT01CF         DATA 0xe4
0000            149   _LFO0CN         DATA 0xb1
0000            150   _P0             DATA 0x80
0000            151   _P0MASK         DATA 0xfe
0000            152   _P0MAT          DATA 0xfd
0000            153   _P0MDIN         DATA 0xf1
0000            154   _P0MDOUT        DATA 0xa4
0000            155   _P0SKIP         DATA 0xd4
0000            156   _P1             DATA 0x90
0000            157   _P1MASK         DATA 0xee
0000            158   _P1MAT          DATA 0xed
0000            159   _P1MDIN         DATA 0xf2
0000            160   _P1MDOUT        DATA 0xa5
0000            161   _P1SKIP         DATA 0xd5
0000            162   _P2             DATA 0xa0
0000            163   _P2MASK         DATA 0xfc
0000            164   _P2MAT          DATA 0xfb
0000            165   _P2MDIN         DATA 0xf3
0000            166   _P2MDOUT        DATA 0xa6
0000            167   _P2SKIP         DATA 0xcc
0000            168   _P3             DATA 0xb0
0000            169   _P3MDIN         DATA 0xf4
0000            170   _P3MDOUT        DATA 0x9c
0000            171   _PCA0CENT       DATA 0x9e
0000            172   _PCA0CLR        DATA 0x9c
0000            173   _PCA0CN0        DATA 0xd8
0000            174   _PCA0CPH0       DATA 0xfc
0000            175   _PCA0CPH1       DATA 0xea
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPH3       DATA 0xf5
0000            178   _PCA0CPH4       DATA 0x85
0000            179   _PCA0CPH5       DATA 0xde
0000            180   _PCA0CPL0       DATA 0xfb
0000            181   _PCA0CPL1       DATA 0xe9
0000            182   _PCA0CPL2       DATA 0xeb
0000            183   _PCA0CPL3       DATA 0xf4
0000            184   _PCA0CPL4       DATA 0x84
0000            185   _PCA0CPL5       DATA 0xdd
0000            186   _PCA0CPM0       DATA 0xda
0000            187   _PCA0CPM1       DATA 0xdb
0000            188   _PCA0CPM2       DATA 0xdc
0000            189   _PCA0CPM3       DATA 0xae
0000            190   _PCA0CPM4       DATA 0xaf
0000            191   _PCA0CPM5       DATA 0xcc
0000            192   _PCA0H          DATA 0xfa
0000            193   _PCA0L          DATA 0xf9
0000            194   _PCA0MD         DATA 0xd9
0000            195   _PCA0POL        DATA 0x96
0000            196   _PCA0PWM        DATA 0xf7
0000            197   _PCON0          DATA 0x87
0000            198   _PCON1          DATA 0xcd
0000            199   _PFE0CN         DATA 0xc1
0000            200   _PRTDRV         DATA 0xf6
0000            201   _PSCTL          DATA 0x8f
0000            202   _PSTAT0         DATA 0xaa
0000            203   _PSW            DATA 0xd0
0000            204   _REF0CN         DATA 0xd1
0000            205   _REG0CN         DATA 0xc9
0000            206   _REVID          DATA 0xb6
0000            207   _RSTSRC         DATA 0xef
0000            208   _SBCON1         DATA 0x94
0000            209   _SBRLH1         DATA 0x96
0000            210   _SBRLL1         DATA 0x95
0000            211   _SBUF           DATA 0x99
0000            212   _SBUF0          DATA 0x99
0000            213   _SBUF1          DATA 0x92
0000            214   _SCON           DATA 0x98
0000            215   _SCON0          DATA 0x98
0000            216   _SCON1          DATA 0xc8
0000            217   _SFRPAGE        DATA 0xa7
0000            218   _SFRPGCN        DATA 0xbc
0000            219   _SFRSTACK       DATA 0xd7
0000            220   _SMB0ADM        DATA 0xd6
0000            221   _SMB0ADR        DATA 0xd7
0000            222   _SMB0CF         DATA 0xc1
0000            223   _SMB0CN0        DATA 0xc0
0000            224   _SMB0DAT        DATA 0xc2
0000            225   _SMB0FCN0       DATA 0xc3
0000            226   _SMB0FCN1       DATA 0xc4
0000            227   _SMB0FCT        DATA 0xef
0000            228   _SMB0RXLN       DATA 0xc5
0000            229   _SMB0TC         DATA 0xac
0000            230   _SMOD1          DATA 0x93
0000            231   _SP             DATA 0x81
0000            232   _SPI0CFG        DATA 0xa1
0000            233   _SPI0CKR        DATA 0xa2
0000            234   _SPI0CN0        DATA 0xf8
0000            235   _SPI0DAT        DATA 0xa3
0000            236   _SPI0FCN0       DATA 0x9a
0000            237   _SPI0FCN1       DATA 0x9b
0000            238   _SPI0FCT        DATA 0xf7
0000            239   _SPI0PCF        DATA 0xdf
0000            240   _TCON           DATA 0x88
0000            241   _TH0            DATA 0x8c
0000            242   _TH1            DATA 0x8d
0000            243   _TL0            DATA 0x8a
0000            244   _TL1            DATA 0x8b
0000            245   _TMOD           DATA 0x89
0000            246   _TMR2CN0        DATA 0xc8
0000            247   _TMR2CN1        DATA 0xfd
0000            248   _TMR2H          DATA 0xcf
0000            249   _TMR2L          DATA 0xce
0000            250   _TMR2RLH        DATA 0xcb
0000            251   _TMR2RLL        DATA 0xca
0000            252   _TMR3CN0        DATA 0x91
0000            253   _TMR3CN1        DATA 0xfe
0000            254   _TMR3H          DATA 0x95
0000            255   _TMR3L          DATA 0x94
0000            256   _TMR3RLH        DATA 0x93
0000            257   _TMR3RLL        DATA 0x92
0000            258   _TMR4CN0        DATA 0x98
0000            259   _TMR4CN1        DATA 0xff
0000            260   _TMR4H          DATA 0xa5
0000            261   _TMR4L          DATA 0xa4
0000            262   _TMR4RLH        DATA 0xa3
0000            263   _TMR4RLL        DATA 0xa2
0000            264   _TMR5CN0        DATA 0xc0
0000            265   _TMR5CN1        DATA 0xf1
0000            266   _TMR5H          DATA 0xd5
0000            267   _TMR5L          DATA 0xd4
0000            268   _TMR5RLH        DATA 0xd3
0000            269   _TMR5RLL        DATA 0xd2
0000            270   _UART0PCF       DATA 0xd9
0000            271   _UART1FCN0      DATA 0x9d
0000            272   _UART1FCN1      DATA 0xd8
0000            273   _UART1FCT       DATA 0xfa
0000            274   _UART1LIN       DATA 0x9e
0000            275   _UART1PCF       DATA 0xda
0000            276   _VDM0CN         DATA 0xff
0000            277   _WDTCN          DATA 0x97
0000            278   _XBR0           DATA 0xe1
0000            279   _XBR1           DATA 0xe2
0000            280   _XBR2           DATA 0xe3
0000            281   _XOSC0CN        DATA 0x86
0000            282   _DPTR           DATA 0x8382
0000            283   _TMR2RL         DATA 0xcbca
0000            284   _TMR3RL         DATA 0x9392
0000            285   _TMR4RL         DATA 0xa3a2
0000            286   _TMR5RL         DATA 0xd3d2
0000            287   _TMR0           DATA 0x8c8a
0000            288   _TMR1           DATA 0x8d8b
0000            289   _TMR2           DATA 0xcfce
0000            290   _TMR3           DATA 0x9594
0000            291   _TMR4           DATA 0xa5a4
0000            292   _TMR5           DATA 0xd5d4
0000            293   _SBRL1          DATA 0x9695
0000            294   _PCA0           DATA 0xfaf9
0000            295   _PCA0CP0        DATA 0xfcfb
0000            296   _PCA0CP1        DATA 0xeae9
0000            297   _PCA0CP2        DATA 0xeceb
0000            298   _PCA0CP3        DATA 0xf5f4
0000            299   _PCA0CP4        DATA 0x8584
0000            300   _PCA0CP5        DATA 0xdedd
0000            301   _ADC0ASA        DATA 0xb6b5
0000            302   _ADC0GT         DATA 0xc4c3
0000            303   _ADC0           DATA 0xbebd
0000            304   _ADC0LT         DATA 0xc6c5
0000            305   _DAC0           DATA 0x8584
0000            306   _DAC1           DATA 0x8a89
0000            307   _DAC2           DATA 0x8c8b
0000            308   _DAC3           DATA 0x8e8d
0000            309   ;--------------------------------------------------------
0000            310   ; special function bits
0000            311   ;--------------------------------------------------------
0000            312   _ACC_0          BIT 0xe0
0000            313   _ACC_1          BIT 0xe1
0000            314   _ACC_2          BIT 0xe2
0000            315   _ACC_3          BIT 0xe3
0000            316   _ACC_4          BIT 0xe4
0000            317   _ACC_5          BIT 0xe5
0000            318   _ACC_6          BIT 0xe6
0000            319   _ACC_7          BIT 0xe7
0000            320   _TEMPE          BIT 0xe8
0000            321   _ADGN0          BIT 0xe9
0000            322   _ADGN1          BIT 0xea
0000            323   _ADWINT         BIT 0xeb
0000            324   _ADBUSY         BIT 0xec
0000            325   _ADINT          BIT 0xed
0000            326   _IPOEN          BIT 0xee
0000            327   _ADEN           BIT 0xef
0000            328   _B_0            BIT 0xf0
0000            329   _B_1            BIT 0xf1
0000            330   _B_2            BIT 0xf2
0000            331   _B_3            BIT 0xf3
0000            332   _B_4            BIT 0xf4
0000            333   _B_5            BIT 0xf5
0000            334   _B_6            BIT 0xf6
0000            335   _B_7            BIT 0xf7
0000            336   _C0FIF          BIT 0xe8
0000            337   _C0RIF          BIT 0xe9
0000            338   _C1FIF          BIT 0xea
0000            339   _C1RIF          BIT 0xeb
0000            340   _C2FIF          BIT 0xec
0000            341   _C2RIF          BIT 0xed
0000            342   _C3FIF          BIT 0xee
0000            343   _C3RIF          BIT 0xef
0000            344   _D1SRC0         BIT 0x88
0000            345   _D1SRC1         BIT 0x89
0000            346   _D1AMEN         BIT 0x8a
0000            347   _D01REFSL       BIT 0x8b
0000            348   _D3SRC0         BIT 0x8c
0000            349   _D3SRC1         BIT 0x8d
0000            350   _D3AMEN         BIT 0x8e
0000            351   _D23REFSL       BIT 0x8f
0000            352   _D0UDIS         BIT 0x98
0000            353   _D1UDIS         BIT 0x99
0000            354   _D2UDIS         BIT 0x9a
0000            355   _D3UDIS         BIT 0x9b
0000            356   _EX0            BIT 0xa8
0000            357   _ET0            BIT 0xa9
0000            358   _EX1            BIT 0xaa
0000            359   _ET1            BIT 0xab
0000            360   _ES0            BIT 0xac
0000            361   _ET2            BIT 0xad
0000            362   _ESPI0          BIT 0xae
0000            363   _EA             BIT 0xaf
0000            364   _PX0            BIT 0xb8
0000            365   _PT0            BIT 0xb9
0000            366   _PX1            BIT 0xba
0000            367   _PT1            BIT 0xbb
0000            368   _PS0            BIT 0xbc
0000            369   _PT2            BIT 0xbd
0000            370   _PSPI0          BIT 0xbe
0000            371   _P0_0           BIT 0x80
0000            372   _P0_1           BIT 0x81
0000            373   _P0_2           BIT 0x82
0000            374   _P0_3           BIT 0x83
0000            375   _P0_4           BIT 0x84
0000            376   _P0_5           BIT 0x85
0000            377   _P0_6           BIT 0x86
0000            378   _P0_7           BIT 0x87
0000            379   _P1_0           BIT 0x90
0000            380   _P1_1           BIT 0x91
0000            381   _P1_2           BIT 0x92
0000            382   _P1_3           BIT 0x93
0000            383   _P1_4           BIT 0x94
0000            384   _P1_5           BIT 0x95
0000            385   _P1_6           BIT 0x96
0000            386   _P1_7           BIT 0x97
0000            387   _P2_0           BIT 0xa0
0000            388   _P2_1           BIT 0xa1
0000            389   _P2_2           BIT 0xa2
0000            390   _P2_3           BIT 0xa3
0000            391   _P2_4           BIT 0xa4
0000            392   _P2_5           BIT 0xa5
0000            393   _P2_6           BIT 0xa6
0000            394   _P3_0           BIT 0xb0
0000            395   _P3_1           BIT 0xb1
0000            396   _P3_2           BIT 0xb2
0000            397   _P3_3           BIT 0xb3
0000            398   _P3_4           BIT 0xb4
0000            399   _P3_7           BIT 0xb7
0000            400   _CCF0           BIT 0xd8
0000            401   _CCF1           BIT 0xd9
0000            402   _CCF2           BIT 0xda
0000            403   _CCF3           BIT 0xdb
0000            404   _CCF4           BIT 0xdc
0000            405   _CCF5           BIT 0xdd
0000            406   _CR             BIT 0xde
0000            407   _CF             BIT 0xdf
0000            408   _PARITY         BIT 0xd0
0000            409   _F1             BIT 0xd1
0000            410   _OV             BIT 0xd2
0000            411   _RS0            BIT 0xd3
0000            412   _RS1            BIT 0xd4
0000            413   _F0             BIT 0xd5
0000            414   _AC             BIT 0xd6
0000            415   _CY             BIT 0xd7
0000            416   _RI             BIT 0x98
0000            417   _TI             BIT 0x99
0000            418   _RB8            BIT 0x9a
0000            419   _TB8            BIT 0x9b
0000            420   _REN            BIT 0x9c
0000            421   _CE             BIT 0x9d
0000            422   _SMODE          BIT 0x9e
0000            423   _RI1            BIT 0xc8
0000            424   _TI1            BIT 0xc9
0000            425   _RBX1           BIT 0xca
0000            426   _TBX1           BIT 0xcb
0000            427   _REN1           BIT 0xcc
0000            428   _PERR1          BIT 0xcd
0000            429   _OVR1           BIT 0xce
0000            430   _SI             BIT 0xc0
0000            431   _ACK            BIT 0xc1
0000            432   _ARBLOST        BIT 0xc2
0000            433   _ACKRQ          BIT 0xc3
0000            434   _STO            BIT 0xc4
0000            435   _STA            BIT 0xc5
0000            436   _TXMODE         BIT 0xc6
0000            437   _MASTER         BIT 0xc7
0000            438   _SPIEN          BIT 0xf8
0000            439   _TXNF           BIT 0xf9
0000            440   _NSSMD0         BIT 0xfa
0000            441   _NSSMD1         BIT 0xfb
0000            442   _RXOVRN         BIT 0xfc
0000            443   _MODF           BIT 0xfd
0000            444   _WCOL           BIT 0xfe
0000            445   _SPIF           BIT 0xff
0000            446   _IT0            BIT 0x88
0000            447   _IE0            BIT 0x89
0000            448   _IT1            BIT 0x8a
0000            449   _IE1            BIT 0x8b
0000            450   _TR0            BIT 0x8c
0000            451   _TF0            BIT 0x8d
0000            452   _TR1            BIT 0x8e
0000            453   _TF1            BIT 0x8f
0000            454   _T2XCLK0        BIT 0xc8
0000            455   _T2XCLK1        BIT 0xc9
0000            456   _TR2            BIT 0xca
0000            457   _T2SPLIT        BIT 0xcb
0000            458   _TF2CEN         BIT 0xcc
0000            459   _TF2LEN         BIT 0xcd
0000            460   _TF2L           BIT 0xce
0000            461   _TF2H           BIT 0xcf
0000            462   _T4XCLK0        BIT 0x98
0000            463   _T4XCLK1        BIT 0x99
0000            464   _TR4            BIT 0x9a
0000            465   _T4SPLIT        BIT 0x9b
0000            466   _TF4CEN         BIT 0x9c
0000            467   _TF4LEN         BIT 0x9d
0000            468   _TF4L           BIT 0x9e
0000            469   _TF4H           BIT 0x9f
0000            470   _T5XCLK0        BIT 0xc0
0000            471   _T5XCLK1        BIT 0xc1
0000            472   _TR5            BIT 0xc2
0000            473   _T5SPLIT        BIT 0xc3
0000            474   _TF5CEN         BIT 0xc4
0000            475   _TF5LEN         BIT 0xc5
0000            476   _TF5L           BIT 0xc6
0000            477   _TF5H           BIT 0xc7
0000            478   _RIE            BIT 0xd8
0000            479   _RXTO0          BIT 0xd9
0000            480   _RXTO1          BIT 0xda
0000            481   _RFRQ           BIT 0xdb
0000            482   _TIE            BIT 0xdc
0000            483   _TXHOLD         BIT 0xdd
0000            484   _TXNF1          BIT 0xde
0000            485   _TFRQ           BIT 0xdf
0000            486   ;--------------------------------------------------------
0000            487   ; overlayable register banks
0000            488   ;--------------------------------------------------------
0000            489            rbank0 segment data overlay
0000            490   ;--------------------------------------------------------
0000            491   ; overlayable bit register bank
0000            492   ;--------------------------------------------------------
0000            493            rseg BIT_BANK
0000            494   bits:
0000            495            ds 1
0001            496            b0 equ  bits.0 
0001            497            b1 equ  bits.1 
0001            498            b2 equ  bits.2 
0001            499            b3 equ  bits.3 
0001            500            b4 equ  bits.4 
0001            501            b5 equ  bits.5 
0001            502            b6 equ  bits.6 
0001            503            b7 equ  bits.7 
0001            504   ;--------------------------------------------------------
0001            505   ; internal ram data
0001            506   ;--------------------------------------------------------
0000            507            rseg R_DSEG
0000            508   _count:
0000            509            ds 2
0002            510   _state:
0002            511            ds 2
0004            512   _PWM_percent_y:
0004            513            ds 4
0008            514   _PWM_percent_x:
0008            515            ds 4
000C            516   _prev_PWM_percent_x:
000C            517            ds 4
0010            518   _prev_PWM_percent_y:
0010            519            ds 4
0014            520   _movement_manager_PARM_2:
0014            521            ds 4
0018            522   _movement_manager_PARM_3:
0018            523            ds 4
001C            524   _movement_manager_PARM_4:
001C            525            ds 4
0020            526   _movement_manager_PARM_5:
0020            527            ds 1
0021            528   ;--------------------------------------------------------
0021            529   ; overlayable items in internal ram 
0021            530   ;--------------------------------------------------------
0000            531            rseg R_OSEG
0000            532   ;--------------------------------------------------------
0000            533   ; indirectly addressable internal ram data
0000            534   ;--------------------------------------------------------
0000            535            rseg R_ISEG
0000            536   ;--------------------------------------------------------
0000            537   ; absolute internal ram data
0000            538   ;--------------------------------------------------------
0000            539            DSEG
0000            540   ;--------------------------------------------------------
0000            541   ; bit data
0000            542   ;--------------------------------------------------------
0000            543            rseg R_BSEG
0000            544   ;--------------------------------------------------------
0000            545   ; paged external ram data
0000            546   ;--------------------------------------------------------
0000            547            rseg R_PSEG
0000            548   ;--------------------------------------------------------
0000            549   ; external ram data
0000            550   ;--------------------------------------------------------
0000            551            rseg R_XSEG
0000            552   ;--------------------------------------------------------
0000            553   ; absolute external ram data
0000            554   ;--------------------------------------------------------
0000            555            XSEG
0000            556   ;--------------------------------------------------------
0000            557   ; external initialized ram data
0000            558   ;--------------------------------------------------------
0000            559            rseg R_IXSEG
0000            560            rseg R_HOME
0000            561            rseg R_GSINIT
0000            562            rseg R_CSEG
0000            563   ;--------------------------------------------------------
0000            564   ; Reset entry point and interrupt vectors
0000            565   ;--------------------------------------------------------
0000            566            CSEG at 0x0000
0000 020000     567            ljmp    _crt0
000B            568            CSEG at 0x000b
000B 020000     569            ljmp    _Timer0_ISR
000E            570   ;--------------------------------------------------------
000E            571   ; global & static initialisations
000E            572   ;--------------------------------------------------------
0000            573            rseg R_HOME
0000            574            rseg R_GSINIT
0000            575            rseg R_GSINIT
0000            576   ;--------------------------------------------------------
0000            577   ; data variables initialization
0000            578   ;--------------------------------------------------------
0000            579            rseg R_DINIT
0000            580   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:15: int count = 0;
0000 E4         581            clr     a
0001 F5B0       582            mov     _count,a
0003 F5B1       583            mov     (_count + 1),a
0005            584   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:17: float PWM_percent_y = 0.5;
0005 753000     585            mov     _PWM_percent_y,#0x00
0008 753100     586            mov     (_PWM_percent_y + 1),#0x00
000B 753200     587            mov     (_PWM_percent_y + 2),#0x00
000E 75333F     588            mov     (_PWM_percent_y + 3),#0x3F
0011            589   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:18: float PWM_percent_x = 0.5;
0011 75F000     590            mov     _PWM_percent_x,#0x00
0014 75F100     591            mov     (_PWM_percent_x + 1),#0x00
0017 75F200     592            mov     (_PWM_percent_x + 2),#0x00
001A 75F33F     593            mov     (_PWM_percent_x + 3),#0x3F
001D            594            ; The linker places a 'ret' at the end of segment R_DINIT.
001D            595   ;--------------------------------------------------------
001D            596   ; code
001D            597   ;--------------------------------------------------------
0000            598            rseg R_CSEG
0000            599   ;------------------------------------------------------------
0000            600   ;Allocation info for local variables in function '_c51_external_startup'
0000            601   ;------------------------------------------------------------
0000            602   ;------------------------------------------------------------
0000            603   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:22: char _c51_external_startup (void)
0000            604   ;        -----------------------------------------
0000            605   ;         function _c51_external_startup
0000            606   ;        -----------------------------------------
0000            607   __c51_external_startup:
0000            608            using   0
0000            609   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:25: SFRPAGE = 0x00;
0000 75A700     610            mov     _SFRPAGE,#0x00
0003            611   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:26: WDTCN = 0xDE; //First key
0003 7597DE     612            mov     _WDTCN,#0xDE
0006            613   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:27: WDTCN = 0xAD; //Second key
0006 7597AD     614            mov     _WDTCN,#0xAD
0009            615   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:29: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     616            mov     _VDM0CN,#0x80
000C            617   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:30: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     618            mov     _RSTSRC,#0x06
000F            619   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:37: SFRPAGE = 0x10;
000F 75A710     620            mov     _SFRPAGE,#0x10
0012            621   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:38: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     622            mov     _PFE0CN,#0x20
0015            623   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:39: SFRPAGE = 0x00;
0015 75A700     624            mov     _SFRPAGE,#0x00
0018            625   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:60: CLKSEL = 0x00;
0018 75A900     626            mov     _CLKSEL,#0x00
001B            627   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:61: CLKSEL = 0x00;
001B 75A900     628            mov     _CLKSEL,#0x00
001E            629   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:62: while ((CLKSEL & 0x80) == 0);
001E            630   L002001?:
001E E5A9       631            mov     a,_CLKSEL
0020 30E7F0     632            jnb     acc.7,L002001?
0023            633   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:63: CLKSEL = 0x03;
0023 75A903     634            mov     _CLKSEL,#0x03
0026            635   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:64: CLKSEL = 0x03;
0026 75A903     636            mov     _CLKSEL,#0x03
0029            637   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:65: while ((CLKSEL & 0x80) == 0);
0029            638   L002004?:
0029 E5A9       639            mov     a,_CLKSEL
002B 30E770     640            jnb     acc.7,L002004?
002E            641   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:70: return 0;
002E 758200     642            mov     dpl,#0x00
0031 22         643            ret
0032            644   ;------------------------------------------------------------
0032            645   ;Allocation info for local variables in function 'TIMER0_Init'
0032            646   ;------------------------------------------------------------
0032            647   ;------------------------------------------------------------
0032            648   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:82: void TIMER0_Init(void)
0032            649   ;        -----------------------------------------
0032            650   ;         function TIMER0_Init
0032            651   ;        -----------------------------------------
0032            652   _TIMER0_Init:
0032            653   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:85: TR0=0;
0032 C28C       654            clr     _TR0
0034            655   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:86: TF0=0;
0034 C28D       656            clr     _TF0
0036            657   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:87: CKCON0|=0b_0000_0100; // Timer 0 uses the system clock
0036 438E04     658            orl     _CKCON0,#0x04
0039            659   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:88: TMOD&=0xf0;
0039 5389F0     660            anl     _TMOD,#0xF0
003C            661   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:89: TMOD|=0x01; // Timer 0 in mode 1: 16-bit timer
003C 438901     662            orl     _TMOD,#0x01
003F            663   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:91: TMR0=65536L-(SYSCLK/(2*TIMER_0_FREQ));
003F 758A60     664            mov     _TMR0,#0x60
0042 758C73     665            mov     (_TMR0 >> 8),#0x73
0045            666   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:92: ET0=1;     // Enable Timer0 interrupts
0045 D2A9       667            setb    _ET0
0047            668   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:93: TR0=1;     // Start Timer0
0047 D28C       669            setb    _TR0
0049 22         670            ret
004A            671   ;------------------------------------------------------------
004A            672   ;Allocation info for local variables in function 'Timer0_ISR'
004A            673   ;------------------------------------------------------------
004A            674   ;------------------------------------------------------------
004A            675   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:96: void Timer0_ISR (void) interrupt INTERRUPT_TIMER0
004A            676   ;        -----------------------------------------
004A            677   ;         function Timer0_ISR
004A            678   ;        -----------------------------------------
004A            679   _Timer0_ISR:
004A C0B0       680            push    bits
004C C0E0       681            push    acc
004E C0F0       682            push    b
0050 C082       683            push    dpl
0052 C083       684            push    dph
0054 C002       685            push    (0+2)
0056 C003       686            push    (0+3)
0058 C004       687            push    (0+4)
005A C005       688            push    (0+5)
005C C006       689            push    (0+6)
005E C007       690            push    (0+7)
0060 C000       691            push    (0+0)
0062 C001       692            push    (0+1)
0064 C0D0       693            push    psw
0066 75D000     694            mov     psw,#0x00
0069            695   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:98: SFRPAGE=0x0;
0069 75A700     696            mov     _SFRPAGE,#0x00
006C            697   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:99: TR0 = 0;
006C C28C       698            clr     _TR0
006E            699   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:101: TMR0=0x10000L-(SYSCLK/(2*TIMER_0_FREQ));
006E 758A60     700            mov     _TMR0,#0x60
0071 758C73     701            mov     (_TMR0 >> 8),#0x73
0074            702   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:103: P1_2 = !P1_2;
0074 B292       703            cpl     _P1_2
0076            704   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:105: if (state != idle_enum)
0076 E570       705            mov     a,_state
0078 4571       706            orl     a,(_state + 1)
007A 7000       707            jnz     L004029?
007C 020000     708            ljmp    L004019?
007F            709   L004029?:
007F            710   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:107: if (count > 100)
007F C3         711            clr     c
0080 7464       712            mov     a,#0x64
0082 95B0       713            subb    a,_count
0084 E4         714            clr     a
0085 6480       715            xrl     a,#0x80
0087 85B1F0     716            mov     b,(_count + 1)
008A 63F080     717            xrl     b,#0x80
008D 95F0       718            subb    a,b
008F 5000       719            jnc     L004016?
0091            720   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:110: if (state == left_enum)
0091 7401       721            mov     a,#0x01
0093 B57070     722            cjne    a,_state,L004031?
0096 E4         723            clr     a
0097 B57170     724            cjne    a,(_state + 1),L004031?
009A 8000       725            sjmp    L004032?
009C            726   L004031?:
009C 8000       727            sjmp    L004005?
009E            728   L004032?:
009E            729   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:112: RIGHT_MOTOR_LHS = 1;
009E D2A2       730            setb    _P2_2
00A0 8000       731            sjmp    L004006?
00A2            732   L004005?:
00A2            733   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:114: else if (state == right_enum)
00A2 7402       734            mov     a,#0x02
00A4 B57070     735            cjne    a,_state,L004033?
00A7 E4         736            clr     a
00A8 B57170     737            cjne    a,(_state + 1),L004033?
00AB 8000       738            sjmp    L004034?
00AD            739   L004033?:
00AD 8000       740            sjmp    L004002?
00AF            741   L004034?:
00AF            742   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:116: LEFT_MOTOR_LHS = 1;
00AF D2A4       743            setb    _P2_4
00B1 8000       744            sjmp    L004006?
00B3            745   L004002?:
00B3            746   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:120: LEFT_MOTOR_LHS = 1;
00B3 D2A4       747            setb    _P2_4
00B5            748   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:121: RIGHT_MOTOR_LHS = 1;
00B5 D2A2       749            setb    _P2_2
00B7            750   L004006?:
00B7            751   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:123: count = 0;
00B7 E4         752            clr     a
00B8 F5B0       753            mov     _count,a
00BA F5B1       754            mov     (_count + 1),a
00BC 8000       755            sjmp    L004017?
00BE            756   L004016?:
00BE            757   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:125: else if (count > PWM_percent_y*100)
00BE C030       758            push    _PWM_percent_y
00C0 C031       759            push    (_PWM_percent_y + 1)
00C2 C032       760            push    (_PWM_percent_y + 2)
00C4 C033       761            push    (_PWM_percent_y + 3)
00C6 900000     762            mov     dptr,#0x0000
00C9 75F0C8     763            mov     b,#0xC8
00CC 7442       764            mov     a,#0x42
00CE 120000     765            lcall   ___fsmul
00D1 AA82       766            mov     r2,dpl
00D3 AB83       767            mov     r3,dph
00D5 ACF0       768            mov     r4,b
00D7 FD         769            mov     r5,a
00D8 E581       770            mov     a,sp
00DA 24FC       771            add     a,#0xfc
00DC F581       772            mov     sp,a
00DE 85B082     773            mov     dpl,_count
00E1 85B183     774            mov     dph,(_count + 1)
00E4 C002       775            push    ar2
00E6 C003       776            push    ar3
00E8 C004       777            push    ar4
00EA C005       778            push    ar5
00EC 120000     779            lcall   ___sint2fs
00EF 120000     780            lcall   ___fsgt
00F2 AA82       781            mov     r2,dpl
00F4 E581       782            mov     a,sp
00F6 24FC       783            add     a,#0xfc
00F8 F581       784            mov     sp,a
00FA EA         785            mov     a,r2
00FB 6000       786            jz      L004017?
00FD            787   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:128: if (state == left_enum)
00FD 7401       788            mov     a,#0x01
00FF B57070     789            cjne    a,_state,L004036?
0102 E4         790            clr     a
0103 B57170     791            cjne    a,(_state + 1),L004036?
0106 8000       792            sjmp    L004037?
0108            793   L004036?:
0108 8000       794            sjmp    L004011?
010A            795   L004037?:
010A            796   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:130: RIGHT_MOTOR_LHS = 0;
010A C2A2       797            clr     _P2_2
010C 8000       798            sjmp    L004017?
010E            799   L004011?:
010E            800   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:132: else if (state == right_enum)
010E 7402       801            mov     a,#0x02
0110 B57030     802            cjne    a,_state,L004038?
0113 E4         803            clr     a
0114 B57130     804            cjne    a,(_state + 1),L004038?
0117 8000       805            sjmp    L004039?
0119            806   L004038?:
0119 8000       807            sjmp    L004008?
011B            808   L004039?:
011B            809   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:134: LEFT_MOTOR_LHS = 0;
011B C2A4       810            clr     _P2_4
011D 8000       811            sjmp    L004017?
011F            812   L004008?:
011F            813   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:138: LEFT_MOTOR_LHS = 0;
011F C2A4       814            clr     _P2_4
0121            815   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:139: RIGHT_MOTOR_LHS = 0;
0121 C2A2       816            clr     _P2_2
0123            817   L004017?:
0123            818   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:142: count++;
0123 05B0       819            inc     _count
0125 E4         820            clr     a
0126 B5B0F0     821            cjne    a,_count,L004040?
0129 05B1       822            inc     (_count + 1)
012B            823   L004040?:
012B            824   L004019?:
012B            825   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:146: TR0 = 1;
012B D28C       826            setb    _TR0
012D D0D0       827            pop     psw
012F D001       828            pop     (0+1)
0131 D000       829            pop     (0+0)
0133 D007       830            pop     (0+7)
0135 D006       831            pop     (0+6)
0137 D005       832            pop     (0+5)
0139 D004       833            pop     (0+4)
013B D003       834            pop     (0+3)
013D D002       835            pop     (0+2)
013F D083       836            pop     dph
0141 D082       837            pop     dpl
0143 D0F0       838            pop     b
0145 D0E0       839            pop     acc
0147 D0B0       840            pop     bits
0149 32         841            reti
014A            842   ;------------------------------------------------------------
014A            843   ;Allocation info for local variables in function 'idle'
014A            844   ;------------------------------------------------------------
014A            845   ;------------------------------------------------------------
014A            846   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:150: void idle(void)
014A            847   ;        -----------------------------------------
014A            848   ;         function idle
014A            849   ;        -----------------------------------------
014A            850   _idle:
014A            851   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:152: LEFT_MOTOR_LHS = 0;
014A C2A4       852            clr     _P2_4
014C            853   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:153: LEFT_MOTOR_RHS = 0;
014C C2A3       854            clr     _P2_3
014E            855   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:154: RIGHT_MOTOR_LHS = 0;
014E C2A2       856            clr     _P2_2
0150            857   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:155: RIGHT_MOTOR_RHS = 0;
0150 C2A1       858            clr     _P2_1
0152 22         859            ret
0153            860   ;------------------------------------------------------------
0153            861   ;Allocation info for local variables in function 'straight'
0153            862   ;------------------------------------------------------------
0153            863   ;------------------------------------------------------------
0153            864   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:158: void straight(void)
0153            865   ;        -----------------------------------------
0153            866   ;         function straight
0153            867   ;        -----------------------------------------
0153            868   _straight:
0153            869   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:160: LEFT_MOTOR_LHS = 1;
0153 D2A4       870            setb    _P2_4
0155            871   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:161: LEFT_MOTOR_RHS = 0;
0155 C2A3       872            clr     _P2_3
0157            873   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:162: RIGHT_MOTOR_LHS = 1;
0157 D2A2       874            setb    _P2_2
0159            875   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:163: RIGHT_MOTOR_RHS = 0;
0159 C2A1       876            clr     _P2_1
015B 22         877            ret
015C            878   ;------------------------------------------------------------
015C            879   ;Allocation info for local variables in function 'backward'
015C            880   ;------------------------------------------------------------
015C            881   ;------------------------------------------------------------
015C            882   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:166: void backward(void)
015C            883   ;        -----------------------------------------
015C            884   ;         function backward
015C            885   ;        -----------------------------------------
015C            886   _backward:
015C            887   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:168: LEFT_MOTOR_LHS = 0;
015C C2A4       888            clr     _P2_4
015E            889   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:169: LEFT_MOTOR_RHS = 1;
015E D2A3       890            setb    _P2_3
0160            891   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:170: RIGHT_MOTOR_LHS = 0;
0160 C2A2       892            clr     _P2_2
0162            893   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:171: RIGHT_MOTOR_RHS = 1;
0162 D2A1       894            setb    _P2_1
0164 22         895            ret
0165            896   ;------------------------------------------------------------
0165            897   ;Allocation info for local variables in function 'left'
0165            898   ;------------------------------------------------------------
0165            899   ;PWM_percent_y             Allocated to registers r2 r3 r4 r5 
0165            900   ;------------------------------------------------------------
0165            901   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:174: void left(float PWM_percent_y)
0165            902   ;        -----------------------------------------
0165            903   ;         function left
0165            904   ;        -----------------------------------------
0165            905   _left:
0165 AA82       906            mov     r2,dpl
0167 AB83       907            mov     r3,dph
0169 ACF0       908            mov     r4,b
016B FD         909            mov     r5,a
016C            910   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:177: LEFT_MOTOR_LHS = 0;
016C C2A4       911            clr     _P2_4
016E            912   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:178: LEFT_MOTOR_RHS = 0;
016E C2A3       913            clr     _P2_3
0170            914   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:180: if (PWM_percent_y > 0)
0170 E4         915            clr     a
0171 C0E0       916            push    acc
0173 C0E0       917            push    acc
0175 C0E0       918            push    acc
0177 C0E0       919            push    acc
0179 8A82       920            mov     dpl,r2
017B 8B83       921            mov     dph,r3
017D 8CF0       922            mov     b,r4
017F ED         923            mov     a,r5
0180 120000     924            lcall   ___fsgt
0183 AA82       925            mov     r2,dpl
0185 E581       926            mov     a,sp
0187 24FC       927            add     a,#0xfc
0189 F581       928            mov     sp,a
018B EA         929            mov     a,r2
018C 6000       930            jz      L008002?
018E            931   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:182: RIGHT_MOTOR_LHS = 1;
018E D2A2       932            setb    _P2_2
0190            933   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:183: RIGHT_MOTOR_RHS = 0;
0190 C2A1       934            clr     _P2_1
0192 22         935            ret
0193            936   L008002?:
0193            937   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:187: RIGHT_MOTOR_LHS = 0;
0193 C2A2       938            clr     _P2_2
0195            939   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:188: RIGHT_MOTOR_RHS = 1;
0195 D2A1       940            setb    _P2_1
0197 22         941            ret
0198            942   ;------------------------------------------------------------
0198            943   ;Allocation info for local variables in function 'right'
0198            944   ;------------------------------------------------------------
0198            945   ;PWM_percent_y             Allocated to registers r2 r3 r4 r5 
0198            946   ;------------------------------------------------------------
0198            947   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:193: void right(float PWM_percent_y)
0198            948   ;        -----------------------------------------
0198            949   ;         function right
0198            950   ;        -----------------------------------------
0198            951   _right:
0198 AA82       952            mov     r2,dpl
019A AB83       953            mov     r3,dph
019C ACF0       954            mov     r4,b
019E FD         955            mov     r5,a
019F            956   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:196: RIGHT_MOTOR_LHS = 0;
019F C2A2       957            clr     _P2_2
01A1            958   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:197: RIGHT_MOTOR_RHS = 0;
01A1 C2A1       959            clr     _P2_1
01A3            960   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:199: if (PWM_percent_y > 0)
01A3 E4         961            clr     a
01A4 C0E0       962            push    acc
01A6 C0E0       963            push    acc
01A8 C0E0       964            push    acc
01AA C0E0       965            push    acc
01AC 8A82       966            mov     dpl,r2
01AE 8B83       967            mov     dph,r3
01B0 8CF0       968            mov     b,r4
01B2 ED         969            mov     a,r5
01B3 120000     970            lcall   ___fsgt
01B6 AA82       971            mov     r2,dpl
01B8 E581       972            mov     a,sp
01BA 24FC       973            add     a,#0xfc
01BC F581       974            mov     sp,a
01BE EA         975            mov     a,r2
01BF 6000       976            jz      L009002?
01C1            977   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:201: LEFT_MOTOR_LHS = 1;
01C1 D2A4       978            setb    _P2_4
01C3            979   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:202: LEFT_MOTOR_RHS = 0;
01C3 C2A3       980            clr     _P2_3
01C5 22         981            ret
01C6            982   L009002?:
01C6            983   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:206: LEFT_MOTOR_LHS = 0;
01C6 C2A4       984            clr     _P2_4
01C8            985   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:207: LEFT_MOTOR_RHS = 1;
01C8 D2A3       986            setb    _P2_3
01CA 22         987            ret
01CB            988   ;------------------------------------------------------------
01CB            989   ;Allocation info for local variables in function 'movement_manager'
01CB            990   ;------------------------------------------------------------
01CB            991   ;PWM_percent_y             Allocated with name '_movement_manager_PARM_2'
01CB            992   ;prev_PWM_percent_x        Allocated with name '_movement_manager_PARM_3'
01CB            993   ;prev_PWM_percent_y        Allocated with name '_movement_manager_PARM_4'
01CB            994   ;state                     Allocated with name '_movement_manager_PARM_5'
01CB            995   ;PWM_percent_x             Allocated to registers r2 r3 r4 r5 
01CB            996   ;------------------------------------------------------------
01CB            997   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:212: enum State movement_manager(float PWM_percent_x, float PWM_percent_y, float prev_PWM_percent_x, float prev_PWM_percent_y, enum State state)
01CB            998   ;        -----------------------------------------
01CB            999   ;         function movement_manager
01CB           1000   ;        -----------------------------------------
01CB           1001   _movement_manager:
01CB AA82      1002            mov     r2,dpl
01CD AB83      1003            mov     r3,dph
01CF ACF0      1004            mov     r4,b
01D1 FD        1005            mov     r5,a
01D2           1006   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:214: if (prev_PWM_percent_x != PWM_percent_x && prev_PWM_percent_y != PWM_percent_y){
01D2 C002      1007            push    ar2
01D4 C003      1008            push    ar3
01D6 C004      1009            push    ar4
01D8 C005      1010            push    ar5
01DA C002      1011            push    ar2
01DC C003      1012            push    ar3
01DE C004      1013            push    ar4
01E0 C005      1014            push    ar5
01E2 85C082    1015            mov     dpl,_movement_manager_PARM_3
01E5 85C183    1016            mov     dph,(_movement_manager_PARM_3 + 1)
01E8 85C2F0    1017            mov     b,(_movement_manager_PARM_3 + 2)
01EB E5C3      1018            mov     a,(_movement_manager_PARM_3 + 3)
01ED 120000    1019            lcall   ___fseq
01F0 AE82      1020            mov     r6,dpl
01F2 E581      1021            mov     a,sp
01F4 24FC      1022            add     a,#0xfc
01F6 F581      1023            mov     sp,a
01F8 D005      1024            pop     ar5
01FA D004      1025            pop     ar4
01FC D003      1026            pop     ar3
01FE D002      1027            pop     ar2
0200 EE        1028            mov     a,r6
0201 6000      1029            jz      L010026?
0203 020000    1030            ljmp    L010015?
0206           1031   L010026?:
0206 C002      1032            push    ar2
0208 C003      1033            push    ar3
020A C004      1034            push    ar4
020C C005      1035            push    ar5
020E C010      1036            push    _movement_manager_PARM_2
0210 C011      1037            push    (_movement_manager_PARM_2 + 1)
0212 C012      1038            push    (_movement_manager_PARM_2 + 2)
0214 C013      1039            push    (_movement_manager_PARM_2 + 3)
0216 857082    1040            mov     dpl,_movement_manager_PARM_4
0219 857183    1041            mov     dph,(_movement_manager_PARM_4 + 1)
021C 8572F0    1042            mov     b,(_movement_manager_PARM_4 + 2)
021F E573      1043            mov     a,(_movement_manager_PARM_4 + 3)
0221 120000    1044            lcall   ___fseq
0224 AE82      1045            mov     r6,dpl
0226 E581      1046            mov     a,sp
0228 24FC      1047            add     a,#0xfc
022A F581      1048            mov     sp,a
022C D005      1049            pop     ar5
022E D004      1050            pop     ar4
0230 D003      1051            pop     ar3
0232 D002      1052            pop     ar2
0234 EE        1053            mov     a,r6
0235 6000      1054            jz      L010027?
0237 020000    1055            ljmp    L010015?
023A           1056   L010027?:
023A           1057   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:215: if (PWM_percent_y == 0 && PWM_percent_x == 0)
023A E510      1058            mov     a,_movement_manager_PARM_2
023C 4511      1059            orl     a,(_movement_manager_PARM_2 + 1)
023E 4512      1060            orl     a,(_movement_manager_PARM_2 + 2)
0240 8513F0    1061            mov     b,(_movement_manager_PARM_2 + 3)
0243 C2F7      1062            clr     b.7 ; Clear the sign bit
0245 45F0      1063            orl     a,b
0247 7000      1064            jnz     L010011?
0249 EA        1065            mov     a,r2
024A 4B        1066            orl     a,r3
024B 4C        1067            orl     a,r4
024C 8DF0      1068            mov     b,r5
024E C2F7      1069            clr     b.7 ; Clear the sign bit
0250 45F0      1070            orl     a,b
0252           1071   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:217: state = idle_enum;
0252 7000      1072            jnz     L010011?
0254 F520      1073            mov     _movement_manager_PARM_5,a
0256           1074   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:218: idle();
0256 120000    1075            lcall   _idle
0259 020000    1076            ljmp    L010015?
025C           1077   L010011?:
025C           1078   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:220: else if (PWM_percent_x < 0)
025C C002      1079            push    ar2
025E C003      1080            push    ar3
0260 C004      1081            push    ar4
0262 C005      1082            push    ar5
0264 E4        1083            clr     a
0265 C0E0      1084            push    acc
0267 C0E0      1085            push    acc
0269 C0E0      1086            push    acc
026B C0E0      1087            push    acc
026D 8A82      1088            mov     dpl,r2
026F 8B83      1089            mov     dph,r3
0271 8CF0      1090            mov     b,r4
0273 ED        1091            mov     a,r5
0274 120000    1092            lcall   ___fslt
0277 AE82      1093            mov     r6,dpl
0279 E581      1094            mov     a,sp
027B 24FC      1095            add     a,#0xfc
027D F581      1096            mov     sp,a
027F D005      1097            pop     ar5
0281 D004      1098            pop     ar4
0283 D003      1099            pop     ar3
0285 D002      1100            pop     ar2
0287 EE        1101            mov     a,r6
0288 6000      1102            jz      L010008?
028A           1103   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:222: state = left_enum;
028A 752001    1104            mov     _movement_manager_PARM_5,#0x01
028D           1105   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:223: left(PWM_percent_y);
028D 851082    1106            mov     dpl,_movement_manager_PARM_2
0290 851183    1107            mov     dph,(_movement_manager_PARM_2 + 1)
0293 8512F0    1108            mov     b,(_movement_manager_PARM_2 + 2)
0296 E513      1109            mov     a,(_movement_manager_PARM_2 + 3)
0298 120000    1110            lcall   _left
029B 8000      1111            sjmp    L010015?
029D           1112   L010008?:
029D           1113   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:225: else if (PWM_percent_x > 0)
029D E4        1114            clr     a
029E C0E0      1115            push    acc
02A0 C0E0      1116            push    acc
02A2 C0E0      1117            push    acc
02A4 C0E0      1118            push    acc
02A6 8A82      1119            mov     dpl,r2
02A8 8B83      1120            mov     dph,r3
02AA 8CF0      1121            mov     b,r4
02AC ED        1122            mov     a,r5
02AD 120000    1123            lcall   ___fsgt
02B0 AA82      1124            mov     r2,dpl
02B2 E581      1125            mov     a,sp
02B4 24FC      1126            add     a,#0xfc
02B6 F581      1127            mov     sp,a
02B8 EA        1128            mov     a,r2
02B9 6000      1129            jz      L010005?
02BB           1130   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:227: state = right_enum;
02BB 752002    1131            mov     _movement_manager_PARM_5,#0x02
02BE           1132   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:228: right(PWM_percent_y);
02BE 851082    1133            mov     dpl,_movement_manager_PARM_2
02C1 851183    1134            mov     dph,(_movement_manager_PARM_2 + 1)
02C4 8512F0    1135            mov     b,(_movement_manager_PARM_2 + 2)
02C7 E513      1136            mov     a,(_movement_manager_PARM_2 + 3)
02C9 120000    1137            lcall   _right
02CC 8000      1138            sjmp    L010015?
02CE           1139   L010005?:
02CE           1140   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:230: else if (PWM_percent_y > 0)
02CE E4        1141            clr     a
02CF C0E0      1142            push    acc
02D1 C0E0      1143            push    acc
02D3 C0E0      1144            push    acc
02D5 C0E0      1145            push    acc
02D7 851082    1146            mov     dpl,_movement_manager_PARM_2
02DA 851183    1147            mov     dph,(_movement_manager_PARM_2 + 1)
02DD 8512F0    1148            mov     b,(_movement_manager_PARM_2 + 2)
02E0 E513      1149            mov     a,(_movement_manager_PARM_2 + 3)
02E2 120000    1150            lcall   ___fsgt
02E5 AA82      1151            mov     r2,dpl
02E7 E581      1152            mov     a,sp
02E9 24FC      1153            add     a,#0xfc
02EB F581      1154            mov     sp,a
02ED EA        1155            mov     a,r2
02EE 6000      1156            jz      L010002?
02F0           1157   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:232: state = straight_enum;
02F0 752003    1158            mov     _movement_manager_PARM_5,#0x03
02F3           1159   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:233: straight();
02F3 120000    1160            lcall   _straight
02F6 8000      1161            sjmp    L010015?
02F8           1162   L010002?:
02F8           1163   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:237: state = backward_enum;
02F8 752004    1164            mov     _movement_manager_PARM_5,#0x04
02FB           1165   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:238: backward();
02FB 120000    1166            lcall   _backward
02FE           1167   L010015?:
02FE           1168   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:241: return state;
02FE 852082    1169            mov     dpl,_movement_manager_PARM_5
0301 22        1170            ret
0302           1171   ;------------------------------------------------------------
0302           1172   ;Allocation info for local variables in function 'main'
0302           1173   ;------------------------------------------------------------
0302           1174   ;------------------------------------------------------------
0302           1175   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:245: int main(void)
0302           1176   ;        -----------------------------------------
0302           1177   ;         function main
0302           1178   ;        -----------------------------------------
0302           1179   _main:
0302           1180   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:247: TIMER0_Init();
0302 120000    1181            lcall   _TIMER0_Init
0305           1182   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:248: while(1)
0305           1183   L011002?:
0305           1184   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:250: state = movement_manager(PWM_percent_x, PWM_percent_y, prev_PWM_percent_x, prev_PWM_percent_y, state);
0305 857020    1185            mov     _movement_manager_PARM_5,_state
0308 853010    1186            mov     _movement_manager_PARM_2,_PWM_percent_y
030B 853111    1187            mov     (_movement_manager_PARM_2 + 1),(_PWM_percent_y + 1)
030E 853212    1188            mov     (_movement_manager_PARM_2 + 2),(_PWM_percent_y + 2)
0311 853313    1189            mov     (_movement_manager_PARM_2 + 3),(_PWM_percent_y + 3)
0314 85B0C0    1190            mov     _movement_manager_PARM_3,_prev_PWM_percent_x
0317 85B1C1    1191            mov     (_movement_manager_PARM_3 + 1),(_prev_PWM_percent_x + 1)
031A 85B2C2    1192            mov     (_movement_manager_PARM_3 + 2),(_prev_PWM_percent_x + 2)
031D 85B3C3    1193            mov     (_movement_manager_PARM_3 + 3),(_prev_PWM_percent_x + 3)
0320 856070    1194            mov     _movement_manager_PARM_4,_prev_PWM_percent_y
0323 856171    1195            mov     (_movement_manager_PARM_4 + 1),(_prev_PWM_percent_y + 1)
0326 856272    1196            mov     (_movement_manager_PARM_4 + 2),(_prev_PWM_percent_y + 2)
0329 856373    1197            mov     (_movement_manager_PARM_4 + 3),(_prev_PWM_percent_y + 3)
032C 85F082    1198            mov     dpl,_PWM_percent_x
032F 85F183    1199            mov     dph,(_PWM_percent_x + 1)
0332 85F2F0    1200            mov     b,(_PWM_percent_x + 2)
0335 E5F3      1201            mov     a,(_PWM_percent_x + 3)
0337 120000    1202            lcall   _movement_manager
033A AA82      1203            mov     r2,dpl
033C 8A70      1204            mov     _state,r2
033E 757100    1205            mov     (_state + 1),#0x00
0341           1206   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:251: prev_PWM_percent_x = PWM_percent_x;
0341 85F0B0    1207            mov     _prev_PWM_percent_x,_PWM_percent_x
0344 85F1B1    1208            mov     (_prev_PWM_percent_x + 1),(_PWM_percent_x + 1)
0347 85F2B2    1209            mov     (_prev_PWM_percent_x + 2),(_PWM_percent_x + 2)
034A 85F3B3    1210            mov     (_prev_PWM_percent_x + 3),(_PWM_percent_x + 3)
034D           1211   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\STM32\Controller\testmovement.c:252: prev_PWM_percent_y = PWM_percent_y;
034D 853060    1212            mov     _prev_PWM_percent_y,_PWM_percent_y
0350 853161    1213            mov     (_prev_PWM_percent_y + 1),(_PWM_percent_y + 1)
0353 853262    1214            mov     (_prev_PWM_percent_y + 2),(_PWM_percent_y + 2)
0356 853363    1215            mov     (_prev_PWM_percent_y + 3),(_PWM_percent_y + 3)
0359 8000      1216            sjmp    L011002?
035B           1217            rseg R_CSEG
035B           1218   
0000           1219            rseg R_XINIT
0000           1220   
0000           1221            rseg R_CONST
0000           1222   
000E           1223            CSEG
000E           1224   
000E           1225   end
