0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 27 16:49:29 2024
0000              5   ;--------------------------------------------------------
                  5   $name test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _Timer3_ISR
0000             29            public _PWM_manager
0000             30            public _TIMER3Init
0000             31            public _UART1_Init
0000             32            public _Serial_Init
0000             33            public _waitms
0000             34            public _Timer3us
0000             35            public _TIMER0_Init
0000             36            public __c51_external_startup
0000             37            public _PWM_manager_PARM_2
0000             38            public _prev_PWM_percent_y
0000             39            public _prev_PWM_percent_x
0000             40            public _right_wheel
0000             41            public _left_wheel
0000             42            public _PWM_percent_x
0000             43            public _PWM_percent_y
0000             44            public _state
0000             45            public _count
0000             46            public _inductance
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _ACC            DATA 0xe0
0000             51   _ADC0ASAH       DATA 0xb6
0000             52   _ADC0ASAL       DATA 0xb5
0000             53   _ADC0ASCF       DATA 0xa1
0000             54   _ADC0ASCT       DATA 0xc7
0000             55   _ADC0CF0        DATA 0xbc
0000             56   _ADC0CF1        DATA 0xb9
0000             57   _ADC0CF2        DATA 0xdf
0000             58   _ADC0CN0        DATA 0xe8
0000             59   _ADC0CN1        DATA 0xb2
0000             60   _ADC0CN2        DATA 0xb3
0000             61   _ADC0GTH        DATA 0xc4
0000             62   _ADC0GTL        DATA 0xc3
0000             63   _ADC0H          DATA 0xbe
0000             64   _ADC0L          DATA 0xbd
0000             65   _ADC0LTH        DATA 0xc6
0000             66   _ADC0LTL        DATA 0xc5
0000             67   _ADC0MX         DATA 0xbb
0000             68   _B              DATA 0xf0
0000             69   _CKCON0         DATA 0x8e
0000             70   _CKCON1         DATA 0xa6
0000             71   _CLEN0          DATA 0xc6
0000             72   _CLIE0          DATA 0xc7
0000             73   _CLIF0          DATA 0xe8
0000             74   _CLKSEL         DATA 0xa9
0000             75   _CLOUT0         DATA 0xd1
0000             76   _CLU0CF         DATA 0xb1
0000             77   _CLU0FN         DATA 0xaf
0000             78   _CLU0MX         DATA 0x84
0000             79   _CLU1CF         DATA 0xb3
0000             80   _CLU1FN         DATA 0xb2
0000             81   _CLU1MX         DATA 0x85
0000             82   _CLU2CF         DATA 0xb6
0000             83   _CLU2FN         DATA 0xb5
0000             84   _CLU2MX         DATA 0x91
0000             85   _CLU3CF         DATA 0xbf
0000             86   _CLU3FN         DATA 0xbe
0000             87   _CLU3MX         DATA 0xae
0000             88   _CMP0CN0        DATA 0x9b
0000             89   _CMP0CN1        DATA 0x99
0000             90   _CMP0MD         DATA 0x9d
0000             91   _CMP0MX         DATA 0x9f
0000             92   _CMP1CN0        DATA 0xbf
0000             93   _CMP1CN1        DATA 0xac
0000             94   _CMP1MD         DATA 0xab
0000             95   _CMP1MX         DATA 0xaa
0000             96   _CRC0CN0        DATA 0xce
0000             97   _CRC0CN1        DATA 0x86
0000             98   _CRC0CNT        DATA 0xd3
0000             99   _CRC0DAT        DATA 0xcb
0000            100   _CRC0FLIP       DATA 0xcf
0000            101   _CRC0IN         DATA 0xca
0000            102   _CRC0ST         DATA 0xd2
0000            103   _DAC0CF0        DATA 0x91
0000            104   _DAC0CF1        DATA 0x92
0000            105   _DAC0H          DATA 0x85
0000            106   _DAC0L          DATA 0x84
0000            107   _DAC1CF0        DATA 0x93
0000            108   _DAC1CF1        DATA 0x94
0000            109   _DAC1H          DATA 0x8a
0000            110   _DAC1L          DATA 0x89
0000            111   _DAC2CF0        DATA 0x95
0000            112   _DAC2CF1        DATA 0x96
0000            113   _DAC2H          DATA 0x8c
0000            114   _DAC2L          DATA 0x8b
0000            115   _DAC3CF0        DATA 0x9a
0000            116   _DAC3CF1        DATA 0x9c
0000            117   _DAC3H          DATA 0x8e
0000            118   _DAC3L          DATA 0x8d
0000            119   _DACGCF0        DATA 0x88
0000            120   _DACGCF1        DATA 0x98
0000            121   _DACGCF2        DATA 0xa2
0000            122   _DERIVID        DATA 0xad
0000            123   _DEVICEID       DATA 0xb5
0000            124   _DPH            DATA 0x83
0000            125   _DPL            DATA 0x82
0000            126   _EIE1           DATA 0xe6
0000            127   _EIE2           DATA 0xf3
0000            128   _EIP1           DATA 0xbb
0000            129   _EIP1H          DATA 0xee
0000            130   _EIP2           DATA 0xed
0000            131   _EIP2H          DATA 0xf6
0000            132   _EMI0CN         DATA 0xe7
0000            133   _FLKEY          DATA 0xb7
0000            134   _HFO0CAL        DATA 0xc7
0000            135   _HFO1CAL        DATA 0xd6
0000            136   _HFOCN          DATA 0xef
0000            137   _I2C0ADM        DATA 0xff
0000            138   _I2C0CN0        DATA 0xba
0000            139   _I2C0DIN        DATA 0xbc
0000            140   _I2C0DOUT       DATA 0xbb
0000            141   _I2C0FCN0       DATA 0xad
0000            142   _I2C0FCN1       DATA 0xab
0000            143   _I2C0FCT        DATA 0xf5
0000            144   _I2C0SLAD       DATA 0xbd
0000            145   _I2C0STAT       DATA 0xb9
0000            146   _IE             DATA 0xa8
0000            147   _IP             DATA 0xb8
0000            148   _IPH            DATA 0xf2
0000            149   _IT01CF         DATA 0xe4
0000            150   _LFO0CN         DATA 0xb1
0000            151   _P0             DATA 0x80
0000            152   _P0MASK         DATA 0xfe
0000            153   _P0MAT          DATA 0xfd
0000            154   _P0MDIN         DATA 0xf1
0000            155   _P0MDOUT        DATA 0xa4
0000            156   _P0SKIP         DATA 0xd4
0000            157   _P1             DATA 0x90
0000            158   _P1MASK         DATA 0xee
0000            159   _P1MAT          DATA 0xed
0000            160   _P1MDIN         DATA 0xf2
0000            161   _P1MDOUT        DATA 0xa5
0000            162   _P1SKIP         DATA 0xd5
0000            163   _P2             DATA 0xa0
0000            164   _P2MASK         DATA 0xfc
0000            165   _P2MAT          DATA 0xfb
0000            166   _P2MDIN         DATA 0xf3
0000            167   _P2MDOUT        DATA 0xa6
0000            168   _P2SKIP         DATA 0xcc
0000            169   _P3             DATA 0xb0
0000            170   _P3MDIN         DATA 0xf4
0000            171   _P3MDOUT        DATA 0x9c
0000            172   _PCA0CENT       DATA 0x9e
0000            173   _PCA0CLR        DATA 0x9c
0000            174   _PCA0CN0        DATA 0xd8
0000            175   _PCA0CPH0       DATA 0xfc
0000            176   _PCA0CPH1       DATA 0xea
0000            177   _PCA0CPH2       DATA 0xec
0000            178   _PCA0CPH3       DATA 0xf5
0000            179   _PCA0CPH4       DATA 0x85
0000            180   _PCA0CPH5       DATA 0xde
0000            181   _PCA0CPL0       DATA 0xfb
0000            182   _PCA0CPL1       DATA 0xe9
0000            183   _PCA0CPL2       DATA 0xeb
0000            184   _PCA0CPL3       DATA 0xf4
0000            185   _PCA0CPL4       DATA 0x84
0000            186   _PCA0CPL5       DATA 0xdd
0000            187   _PCA0CPM0       DATA 0xda
0000            188   _PCA0CPM1       DATA 0xdb
0000            189   _PCA0CPM2       DATA 0xdc
0000            190   _PCA0CPM3       DATA 0xae
0000            191   _PCA0CPM4       DATA 0xaf
0000            192   _PCA0CPM5       DATA 0xcc
0000            193   _PCA0H          DATA 0xfa
0000            194   _PCA0L          DATA 0xf9
0000            195   _PCA0MD         DATA 0xd9
0000            196   _PCA0POL        DATA 0x96
0000            197   _PCA0PWM        DATA 0xf7
0000            198   _PCON0          DATA 0x87
0000            199   _PCON1          DATA 0xcd
0000            200   _PFE0CN         DATA 0xc1
0000            201   _PRTDRV         DATA 0xf6
0000            202   _PSCTL          DATA 0x8f
0000            203   _PSTAT0         DATA 0xaa
0000            204   _PSW            DATA 0xd0
0000            205   _REF0CN         DATA 0xd1
0000            206   _REG0CN         DATA 0xc9
0000            207   _REVID          DATA 0xb6
0000            208   _RSTSRC         DATA 0xef
0000            209   _SBCON1         DATA 0x94
0000            210   _SBRLH1         DATA 0x96
0000            211   _SBRLL1         DATA 0x95
0000            212   _SBUF           DATA 0x99
0000            213   _SBUF0          DATA 0x99
0000            214   _SBUF1          DATA 0x92
0000            215   _SCON           DATA 0x98
0000            216   _SCON0          DATA 0x98
0000            217   _SCON1          DATA 0xc8
0000            218   _SFRPAGE        DATA 0xa7
0000            219   _SFRPGCN        DATA 0xbc
0000            220   _SFRSTACK       DATA 0xd7
0000            221   _SMB0ADM        DATA 0xd6
0000            222   _SMB0ADR        DATA 0xd7
0000            223   _SMB0CF         DATA 0xc1
0000            224   _SMB0CN0        DATA 0xc0
0000            225   _SMB0DAT        DATA 0xc2
0000            226   _SMB0FCN0       DATA 0xc3
0000            227   _SMB0FCN1       DATA 0xc4
0000            228   _SMB0FCT        DATA 0xef
0000            229   _SMB0RXLN       DATA 0xc5
0000            230   _SMB0TC         DATA 0xac
0000            231   _SMOD1          DATA 0x93
0000            232   _SP             DATA 0x81
0000            233   _SPI0CFG        DATA 0xa1
0000            234   _SPI0CKR        DATA 0xa2
0000            235   _SPI0CN0        DATA 0xf8
0000            236   _SPI0DAT        DATA 0xa3
0000            237   _SPI0FCN0       DATA 0x9a
0000            238   _SPI0FCN1       DATA 0x9b
0000            239   _SPI0FCT        DATA 0xf7
0000            240   _SPI0PCF        DATA 0xdf
0000            241   _TCON           DATA 0x88
0000            242   _TH0            DATA 0x8c
0000            243   _TH1            DATA 0x8d
0000            244   _TL0            DATA 0x8a
0000            245   _TL1            DATA 0x8b
0000            246   _TMOD           DATA 0x89
0000            247   _TMR2CN0        DATA 0xc8
0000            248   _TMR2CN1        DATA 0xfd
0000            249   _TMR2H          DATA 0xcf
0000            250   _TMR2L          DATA 0xce
0000            251   _TMR2RLH        DATA 0xcb
0000            252   _TMR2RLL        DATA 0xca
0000            253   _TMR3CN0        DATA 0x91
0000            254   _TMR3CN1        DATA 0xfe
0000            255   _TMR3H          DATA 0x95
0000            256   _TMR3L          DATA 0x94
0000            257   _TMR3RLH        DATA 0x93
0000            258   _TMR3RLL        DATA 0x92
0000            259   _TMR4CN0        DATA 0x98
0000            260   _TMR4CN1        DATA 0xff
0000            261   _TMR4H          DATA 0xa5
0000            262   _TMR4L          DATA 0xa4
0000            263   _TMR4RLH        DATA 0xa3
0000            264   _TMR4RLL        DATA 0xa2
0000            265   _TMR5CN0        DATA 0xc0
0000            266   _TMR5CN1        DATA 0xf1
0000            267   _TMR5H          DATA 0xd5
0000            268   _TMR5L          DATA 0xd4
0000            269   _TMR5RLH        DATA 0xd3
0000            270   _TMR5RLL        DATA 0xd2
0000            271   _UART0PCF       DATA 0xd9
0000            272   _UART1FCN0      DATA 0x9d
0000            273   _UART1FCN1      DATA 0xd8
0000            274   _UART1FCT       DATA 0xfa
0000            275   _UART1LIN       DATA 0x9e
0000            276   _UART1PCF       DATA 0xda
0000            277   _VDM0CN         DATA 0xff
0000            278   _WDTCN          DATA 0x97
0000            279   _XBR0           DATA 0xe1
0000            280   _XBR1           DATA 0xe2
0000            281   _XBR2           DATA 0xe3
0000            282   _XOSC0CN        DATA 0x86
0000            283   _DPTR           DATA 0x8382
0000            284   _TMR2RL         DATA 0xcbca
0000            285   _TMR3RL         DATA 0x9392
0000            286   _TMR4RL         DATA 0xa3a2
0000            287   _TMR5RL         DATA 0xd3d2
0000            288   _TMR0           DATA 0x8c8a
0000            289   _TMR1           DATA 0x8d8b
0000            290   _TMR2           DATA 0xcfce
0000            291   _TMR3           DATA 0x9594
0000            292   _TMR4           DATA 0xa5a4
0000            293   _TMR5           DATA 0xd5d4
0000            294   _SBRL1          DATA 0x9695
0000            295   _PCA0           DATA 0xfaf9
0000            296   _PCA0CP0        DATA 0xfcfb
0000            297   _PCA0CP1        DATA 0xeae9
0000            298   _PCA0CP2        DATA 0xeceb
0000            299   _PCA0CP3        DATA 0xf5f4
0000            300   _PCA0CP4        DATA 0x8584
0000            301   _PCA0CP5        DATA 0xdedd
0000            302   _ADC0ASA        DATA 0xb6b5
0000            303   _ADC0GT         DATA 0xc4c3
0000            304   _ADC0           DATA 0xbebd
0000            305   _ADC0LT         DATA 0xc6c5
0000            306   _DAC0           DATA 0x8584
0000            307   _DAC1           DATA 0x8a89
0000            308   _DAC2           DATA 0x8c8b
0000            309   _DAC3           DATA 0x8e8d
0000            310   ;--------------------------------------------------------
0000            311   ; special function bits
0000            312   ;--------------------------------------------------------
0000            313   _ACC_0          BIT 0xe0
0000            314   _ACC_1          BIT 0xe1
0000            315   _ACC_2          BIT 0xe2
0000            316   _ACC_3          BIT 0xe3
0000            317   _ACC_4          BIT 0xe4
0000            318   _ACC_5          BIT 0xe5
0000            319   _ACC_6          BIT 0xe6
0000            320   _ACC_7          BIT 0xe7
0000            321   _TEMPE          BIT 0xe8
0000            322   _ADGN0          BIT 0xe9
0000            323   _ADGN1          BIT 0xea
0000            324   _ADWINT         BIT 0xeb
0000            325   _ADBUSY         BIT 0xec
0000            326   _ADINT          BIT 0xed
0000            327   _IPOEN          BIT 0xee
0000            328   _ADEN           BIT 0xef
0000            329   _B_0            BIT 0xf0
0000            330   _B_1            BIT 0xf1
0000            331   _B_2            BIT 0xf2
0000            332   _B_3            BIT 0xf3
0000            333   _B_4            BIT 0xf4
0000            334   _B_5            BIT 0xf5
0000            335   _B_6            BIT 0xf6
0000            336   _B_7            BIT 0xf7
0000            337   _C0FIF          BIT 0xe8
0000            338   _C0RIF          BIT 0xe9
0000            339   _C1FIF          BIT 0xea
0000            340   _C1RIF          BIT 0xeb
0000            341   _C2FIF          BIT 0xec
0000            342   _C2RIF          BIT 0xed
0000            343   _C3FIF          BIT 0xee
0000            344   _C3RIF          BIT 0xef
0000            345   _D1SRC0         BIT 0x88
0000            346   _D1SRC1         BIT 0x89
0000            347   _D1AMEN         BIT 0x8a
0000            348   _D01REFSL       BIT 0x8b
0000            349   _D3SRC0         BIT 0x8c
0000            350   _D3SRC1         BIT 0x8d
0000            351   _D3AMEN         BIT 0x8e
0000            352   _D23REFSL       BIT 0x8f
0000            353   _D0UDIS         BIT 0x98
0000            354   _D1UDIS         BIT 0x99
0000            355   _D2UDIS         BIT 0x9a
0000            356   _D3UDIS         BIT 0x9b
0000            357   _EX0            BIT 0xa8
0000            358   _ET0            BIT 0xa9
0000            359   _EX1            BIT 0xaa
0000            360   _ET1            BIT 0xab
0000            361   _ES0            BIT 0xac
0000            362   _ET2            BIT 0xad
0000            363   _ESPI0          BIT 0xae
0000            364   _EA             BIT 0xaf
0000            365   _PX0            BIT 0xb8
0000            366   _PT0            BIT 0xb9
0000            367   _PX1            BIT 0xba
0000            368   _PT1            BIT 0xbb
0000            369   _PS0            BIT 0xbc
0000            370   _PT2            BIT 0xbd
0000            371   _PSPI0          BIT 0xbe
0000            372   _P0_0           BIT 0x80
0000            373   _P0_1           BIT 0x81
0000            374   _P0_2           BIT 0x82
0000            375   _P0_3           BIT 0x83
0000            376   _P0_4           BIT 0x84
0000            377   _P0_5           BIT 0x85
0000            378   _P0_6           BIT 0x86
0000            379   _P0_7           BIT 0x87
0000            380   _P1_0           BIT 0x90
0000            381   _P1_1           BIT 0x91
0000            382   _P1_2           BIT 0x92
0000            383   _P1_3           BIT 0x93
0000            384   _P1_4           BIT 0x94
0000            385   _P1_5           BIT 0x95
0000            386   _P1_6           BIT 0x96
0000            387   _P1_7           BIT 0x97
0000            388   _P2_0           BIT 0xa0
0000            389   _P2_1           BIT 0xa1
0000            390   _P2_2           BIT 0xa2
0000            391   _P2_3           BIT 0xa3
0000            392   _P2_4           BIT 0xa4
0000            393   _P2_5           BIT 0xa5
0000            394   _P2_6           BIT 0xa6
0000            395   _P3_0           BIT 0xb0
0000            396   _P3_1           BIT 0xb1
0000            397   _P3_2           BIT 0xb2
0000            398   _P3_3           BIT 0xb3
0000            399   _P3_4           BIT 0xb4
0000            400   _P3_7           BIT 0xb7
0000            401   _CCF0           BIT 0xd8
0000            402   _CCF1           BIT 0xd9
0000            403   _CCF2           BIT 0xda
0000            404   _CCF3           BIT 0xdb
0000            405   _CCF4           BIT 0xdc
0000            406   _CCF5           BIT 0xdd
0000            407   _CR             BIT 0xde
0000            408   _CF             BIT 0xdf
0000            409   _PARITY         BIT 0xd0
0000            410   _F1             BIT 0xd1
0000            411   _OV             BIT 0xd2
0000            412   _RS0            BIT 0xd3
0000            413   _RS1            BIT 0xd4
0000            414   _F0             BIT 0xd5
0000            415   _AC             BIT 0xd6
0000            416   _CY             BIT 0xd7
0000            417   _RI             BIT 0x98
0000            418   _TI             BIT 0x99
0000            419   _RB8            BIT 0x9a
0000            420   _TB8            BIT 0x9b
0000            421   _REN            BIT 0x9c
0000            422   _CE             BIT 0x9d
0000            423   _SMODE          BIT 0x9e
0000            424   _RI1            BIT 0xc8
0000            425   _TI1            BIT 0xc9
0000            426   _RBX1           BIT 0xca
0000            427   _TBX1           BIT 0xcb
0000            428   _REN1           BIT 0xcc
0000            429   _PERR1          BIT 0xcd
0000            430   _OVR1           BIT 0xce
0000            431   _SI             BIT 0xc0
0000            432   _ACK            BIT 0xc1
0000            433   _ARBLOST        BIT 0xc2
0000            434   _ACKRQ          BIT 0xc3
0000            435   _STO            BIT 0xc4
0000            436   _STA            BIT 0xc5
0000            437   _TXMODE         BIT 0xc6
0000            438   _MASTER         BIT 0xc7
0000            439   _SPIEN          BIT 0xf8
0000            440   _TXNF           BIT 0xf9
0000            441   _NSSMD0         BIT 0xfa
0000            442   _NSSMD1         BIT 0xfb
0000            443   _RXOVRN         BIT 0xfc
0000            444   _MODF           BIT 0xfd
0000            445   _WCOL           BIT 0xfe
0000            446   _SPIF           BIT 0xff
0000            447   _IT0            BIT 0x88
0000            448   _IE0            BIT 0x89
0000            449   _IT1            BIT 0x8a
0000            450   _IE1            BIT 0x8b
0000            451   _TR0            BIT 0x8c
0000            452   _TF0            BIT 0x8d
0000            453   _TR1            BIT 0x8e
0000            454   _TF1            BIT 0x8f
0000            455   _T2XCLK0        BIT 0xc8
0000            456   _T2XCLK1        BIT 0xc9
0000            457   _TR2            BIT 0xca
0000            458   _T2SPLIT        BIT 0xcb
0000            459   _TF2CEN         BIT 0xcc
0000            460   _TF2LEN         BIT 0xcd
0000            461   _TF2L           BIT 0xce
0000            462   _TF2H           BIT 0xcf
0000            463   _T4XCLK0        BIT 0x98
0000            464   _T4XCLK1        BIT 0x99
0000            465   _TR4            BIT 0x9a
0000            466   _T4SPLIT        BIT 0x9b
0000            467   _TF4CEN         BIT 0x9c
0000            468   _TF4LEN         BIT 0x9d
0000            469   _TF4L           BIT 0x9e
0000            470   _TF4H           BIT 0x9f
0000            471   _T5XCLK0        BIT 0xc0
0000            472   _T5XCLK1        BIT 0xc1
0000            473   _TR5            BIT 0xc2
0000            474   _T5SPLIT        BIT 0xc3
0000            475   _TF5CEN         BIT 0xc4
0000            476   _TF5LEN         BIT 0xc5
0000            477   _TF5L           BIT 0xc6
0000            478   _TF5H           BIT 0xc7
0000            479   _RIE            BIT 0xd8
0000            480   _RXTO0          BIT 0xd9
0000            481   _RXTO1          BIT 0xda
0000            482   _RFRQ           BIT 0xdb
0000            483   _TIE            BIT 0xdc
0000            484   _TXHOLD         BIT 0xdd
0000            485   _TXNF1          BIT 0xde
0000            486   _TFRQ           BIT 0xdf
0000            487   ;--------------------------------------------------------
0000            488   ; overlayable register banks
0000            489   ;--------------------------------------------------------
0000            490            rbank0 segment data overlay
0000            491   ;--------------------------------------------------------
0000            492   ; overlayable bit register bank
0000            493   ;--------------------------------------------------------
0000            494            rseg BIT_BANK
0000            495   bits:
0000            496            ds 1
0001            497            b0 equ  bits.0 
0001            498            b1 equ  bits.1 
0001            499            b2 equ  bits.2 
0001            500            b3 equ  bits.3 
0001            501            b4 equ  bits.4 
0001            502            b5 equ  bits.5 
0001            503            b6 equ  bits.6 
0001            504            b7 equ  bits.7 
0001            505   ;--------------------------------------------------------
0001            506   ; internal ram data
0001            507   ;--------------------------------------------------------
0000            508            rseg R_DSEG
0000            509   _inductance:
0000            510            ds 2
0002            511   _count:
0002            512            ds 2
0004            513   _state:
0004            514            ds 2
0006            515   _PWM_percent_y:
0006            516            ds 2
0008            517   _PWM_percent_x:
0008            518            ds 2
000A            519   _left_wheel:
000A            520            ds 4
000E            521   _right_wheel:
000E            522            ds 4
0012            523   _prev_PWM_percent_x:
0012            524            ds 2
0014            525   _prev_PWM_percent_y:
0014            526            ds 2
0016            527   _PWM_manager_PARM_2:
0016            528            ds 4
001A            529   _PWM_manager_sloc0_1_0:
001A            530            ds 2
001C            531   ;--------------------------------------------------------
001C            532   ; overlayable items in internal ram 
001C            533   ;--------------------------------------------------------
0000            534            rseg    R_OSEG
0000            535   ;--------------------------------------------------------
0000            536   ; indirectly addressable internal ram data
0000            537   ;--------------------------------------------------------
0000            538            rseg R_ISEG
0000            539   ;--------------------------------------------------------
0000            540   ; absolute internal ram data
0000            541   ;--------------------------------------------------------
0000            542            DSEG
0000            543   ;--------------------------------------------------------
0000            544   ; bit data
0000            545   ;--------------------------------------------------------
0000            546            rseg R_BSEG
0000            547   _Timer3_ISR_sloc0_1_0:
0000            548            DBIT    1
0001            549   ;--------------------------------------------------------
0001            550   ; paged external ram data
0001            551   ;--------------------------------------------------------
0000            552            rseg R_PSEG
0000            553   ;--------------------------------------------------------
0000            554   ; external ram data
0000            555   ;--------------------------------------------------------
0000            556            rseg R_XSEG
0000            557   ;--------------------------------------------------------
0000            558   ; absolute external ram data
0000            559   ;--------------------------------------------------------
0000            560            XSEG
0000            561   ;--------------------------------------------------------
0000            562   ; external initialized ram data
0000            563   ;--------------------------------------------------------
0000            564            rseg R_IXSEG
0000            565            rseg R_HOME
0000            566            rseg R_GSINIT
0000            567            rseg R_CSEG
0000            568   ;--------------------------------------------------------
0000            569   ; Reset entry point and interrupt vectors
0000            570   ;--------------------------------------------------------
0000            571            CSEG at 0x0000
0000 020000     572            ljmp    _crt0
0073            573            CSEG at 0x0073
0073 020000     574            ljmp    _Timer3_ISR
0076            575   ;--------------------------------------------------------
0076            576   ; global & static initialisations
0076            577   ;--------------------------------------------------------
0000            578            rseg R_HOME
0000            579            rseg R_GSINIT
0000            580            rseg R_GSINIT
0000            581   ;--------------------------------------------------------
0000            582   ; data variables initialization
0000            583   ;--------------------------------------------------------
0000            584            rseg R_DINIT
0000            585   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:22: volatile int inductance = 0;
0000 E4         586            clr     a
0001 F560       587            mov     _inductance,a
0003 F561       588            mov     (_inductance + 1),a
0005            589   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:32: int count = 0;
0005 E4         590            clr     a
0006 F520       591            mov     _count,a
0008 F521       592            mov     (_count + 1),a
000A            593   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:35: int PWM_percent_y = 100;
000A 75A064     594            mov     _PWM_percent_y,#0x64
000D E4         595            clr     a
000E F5A1       596            mov     (_PWM_percent_y + 1),a
0010            597   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:36: int PWM_percent_x = 20;
0010 756014     598            mov     _PWM_percent_x,#0x14
0013 E4         599            clr     a
0014 F561       600            mov     (_PWM_percent_x + 1),a
0016            601   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:37: float left_wheel = 0;
0016 752000     602            mov     _left_wheel,#0x00
0019 752100     603            mov     (_left_wheel + 1),#0x00
001C 752200     604            mov     (_left_wheel + 2),#0x00
001F 752300     605            mov     (_left_wheel + 3),#0x00
0022            606   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:38: float right_wheel = 0;
0022 75E000     607            mov     _right_wheel,#0x00
0025 75E100     608            mov     (_right_wheel + 1),#0x00
0028 75E200     609            mov     (_right_wheel + 2),#0x00
002B 75E300     610            mov     (_right_wheel + 3),#0x00
002E            611   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:39: int prev_PWM_percent_x = 0;
002E E4         612            clr     a
002F F5A0       613            mov     _prev_PWM_percent_x,a
0031 F5A1       614            mov     (_prev_PWM_percent_x + 1),a
0033            615   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:40: int prev_PWM_percent_y = 0;
0033 E4         616            clr     a
0034 F550       617            mov     _prev_PWM_percent_y,a
0036 F551       618            mov     (_prev_PWM_percent_y + 1),a
0038            619            ; The linker places a 'ret' at the end of segment R_DINIT.
0038            620   ;--------------------------------------------------------
0038            621   ; code
0038            622   ;--------------------------------------------------------
0000            623            rseg R_CSEG
0000            624   ;------------------------------------------------------------
0000            625   ;Allocation info for local variables in function '_c51_external_startup'
0000            626   ;------------------------------------------------------------
0000            627   ;------------------------------------------------------------
0000            628   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:44: char _c51_external_startup (void) {
0000            629   ;        -----------------------------------------
0000            630   ;         function _c51_external_startup
0000            631   ;        -----------------------------------------
0000            632   __c51_external_startup:
0000            633            using   0
0000            634   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:46: SFRPAGE = 0x00;
0000 75A700     635            mov     _SFRPAGE,#0x00
0003            636   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:47: WDTCN = 0xDE; //First key
0003 7597DE     637            mov     _WDTCN,#0xDE
0006            638   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:48: WDTCN = 0xAD; //Second key
0006 7597AD     639            mov     _WDTCN,#0xAD
0009            640   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:50: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     641            mov     _VDM0CN,#0x80
000C            642   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:51: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     643            mov     _RSTSRC,#0x06
000F            644   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:58: SFRPAGE = 0x10;
000F 75A710     645            mov     _SFRPAGE,#0x10
0012            646   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:59: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     647            mov     _PFE0CN,#0x20
0015            648   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:60: SFRPAGE = 0x00;
0015 75A700     649            mov     _SFRPAGE,#0x00
0018            650   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:81: CLKSEL = 0x00;
0018 75A900     651            mov     _CLKSEL,#0x00
001B            652   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:82: CLKSEL = 0x00;
001B 75A900     653            mov     _CLKSEL,#0x00
001E            654   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:83: while ((CLKSEL & 0x80) == 0);
001E            655   L002001?:
001E E5A9       656            mov     a,_CLKSEL
0020 30E748     657            jnb     acc.7,L002001?
0023            658   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:84: CLKSEL = 0x03;
0023 75A903     659            mov     _CLKSEL,#0x03
0026            660   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:85: CLKSEL = 0x03;
0026 75A903     661            mov     _CLKSEL,#0x03
0029            662   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:86: while ((CLKSEL & 0x80) == 0);
0029            663   L002004?:
0029 E5A9       664            mov     a,_CLKSEL
002B 30E7C8     665            jnb     acc.7,L002004?
002E            666   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:91: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     667            orl     _P0MDOUT,#0x11
0031            668   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:92: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     669            orl     _P2MDOUT,#0x01
0034            670   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:93: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0034 75E101     671            mov     _XBR0,#0x01
0037            672   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:94: XBR1     = 0X00;
0037 75E200     673            mov     _XBR1,#0x00
003A            674   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:95: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     675            mov     _XBR2,#0x41
003D            676   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:101: SCON0 = 0x10;
003D 759810     677            mov     _SCON0,#0x10
0040            678   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:102: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     679            mov     _TH1,#0xE6
0043            680   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:103: TL1 = TH1;      // Init Timer1
0043 858D8B     681            mov     _TL1,_TH1
0046            682   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:104: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     683            anl     _TMOD,#0x0F
0049            684   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:105: TMOD |=  0x20;
0049 438920     685            orl     _TMOD,#0x20
004C            686   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:106: TR1 = 1; // START Timer1
004C D28E       687            setb    _TR1
004E            688   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:107: TI = 1;  // Indicate TX0 ready
004E D299       689            setb    _TI
0050            690   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:109: P0MDOUT|=0b_1100_0010;
0050 43A4C2     691            orl     _P0MDOUT,#0xC2
0053            692   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:110: P1MDOUT|=0b_1111_1111;
0053 E5A5       693            mov     a,_P1MDOUT
0055 75A5FF     694            mov     _P1MDOUT,#0xFF
0058            695   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:111: P2MDOUT|=0b_0001_1111;
0058 43A61F     696            orl     _P2MDOUT,#0x1F
005B            697   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:113: return 0;
005B 758200     698            mov     dpl,#0x00
005E 22         699            ret
005F            700   ;------------------------------------------------------------
005F            701   ;Allocation info for local variables in function 'TIMER0_Init'
005F            702   ;------------------------------------------------------------
005F            703   ;------------------------------------------------------------
005F            704   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:115: void TIMER0_Init(void) {
005F            705   ;        -----------------------------------------
005F            706   ;         function TIMER0_Init
005F            707   ;        -----------------------------------------
005F            708   _TIMER0_Init:
005F            709   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:116: TMOD &= 0b_1111_0000; // Set the Bits of Timer/Counter 0 to 0
005F 5389F0     710            anl     _TMOD,#0xF0
0062            711   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:117: TMOD |= 0b_0000_0001; // Timer/Counter 0 Used As 16-Bit Timer
0062 438901     712            orl     _TMOD,#0x01
0065            713   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:118: TR0 = 0; // Stop Timer/Counter 0
0065 C28C       714            clr     _TR0
0067 22         715            ret
0068            716   ;------------------------------------------------------------
0068            717   ;Allocation info for local variables in function 'Timer3us'
0068            718   ;------------------------------------------------------------
0068            719   ;us                        Allocated to registers r2 
0068            720   ;i                         Allocated to registers r3 
0068            721   ;------------------------------------------------------------
0068            722   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:127: void Timer3us(unsigned char us)
0068            723   ;        -----------------------------------------
0068            724   ;         function Timer3us
0068            725   ;        -----------------------------------------
0068            726   _Timer3us:
0068 AA82       727            mov     r2,dpl
006A            728   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:132: CKCON0|=0b_0100_0000;
006A 438E40     729            orl     _CKCON0,#0x40
006D            730   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:134: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
006D 7592B8     731            mov     _TMR3RL,#0xB8
0070 7593FF     732            mov     (_TMR3RL >> 8),#0xFF
0073            733   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:135: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0073 859294     734            mov     _TMR3,_TMR3RL
0076 859395     735            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0079            736   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:137: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0079 759104     737            mov     _TMR3CN0,#0x04
007C            738   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:138: for (i = 0; i < us; i++)       // Count <us> overflows
007C 7B00       739            mov     r3,#0x00
007E            740   L004004?:
007E C3         741            clr     c
007F EB         742            mov     a,r3
0080 9A         743            subb    a,r2
0081 5000       744            jnc     L004007?
0083            745   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:140: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0083            746   L004001?:
0083 E591       747            mov     a,_TMR3CN0
0085 30E7C8     748            jnb     acc.7,L004001?
0088            749   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:141: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0088 53917F     750            anl     _TMR3CN0,#0x7F
008B            751   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:138: for (i = 0; i < us; i++)       // Count <us> overflows
008B 0B         752            inc     r3
008C 8000       753            sjmp    L004004?
008E            754   L004007?:
008E            755   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:143: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
008E 759100     756            mov     _TMR3CN0,#0x00
0091 22         757            ret
0092            758   ;------------------------------------------------------------
0092            759   ;Allocation info for local variables in function 'waitms'
0092            760   ;------------------------------------------------------------
0092            761   ;ms                        Allocated to registers r2 r3 
0092            762   ;j                         Allocated to registers r4 r5 
0092            763   ;k                         Allocated to registers r6 
0092            764   ;------------------------------------------------------------
0092            765   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:146: void waitms (unsigned int ms)
0092            766   ;        -----------------------------------------
0092            767   ;         function waitms
0092            768   ;        -----------------------------------------
0092            769   _waitms:
0092 AA82       770            mov     r2,dpl
0094 AB83       771            mov     r3,dph
0096            772   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:150: for(j=0; j<ms; j++)
0096 7C00       773            mov     r4,#0x00
0098 7D00       774            mov     r5,#0x00
009A            775   L005005?:
009A C3         776            clr     c
009B EC         777            mov     a,r4
009C 9A         778            subb    a,r2
009D ED         779            mov     a,r5
009E 9B         780            subb    a,r3
009F 5000       781            jnc     L005009?
00A1            782   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:151: for (k=0; k<4; k++) Timer3us(250);
00A1 7E00       783            mov     r6,#0x00
00A3            784   L005001?:
00A3 BE0408     785            cjne    r6,#0x04,L005018?
00A6            786   L005018?:
00A6 5000       787            jnc     L005007?
00A8 7582FA     788            mov     dpl,#0xFA
00AB C002       789            push    ar2
00AD C003       790            push    ar3
00AF C004       791            push    ar4
00B1 C005       792            push    ar5
00B3 C006       793            push    ar6
00B5 120000     794            lcall   _Timer3us
00B8 D006       795            pop     ar6
00BA D005       796            pop     ar5
00BC D004       797            pop     ar4
00BE D003       798            pop     ar3
00C0 D002       799            pop     ar2
00C2 0E         800            inc     r6
00C3 8000       801            sjmp    L005001?
00C5            802   L005007?:
00C5            803   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:150: for(j=0; j<ms; j++)
00C5 0C         804            inc     r4
00C6 BC0048     805            cjne    r4,#0x00,L005005?
00C9 0D         806            inc     r5
00CA 8000       807            sjmp    L005005?
00CC            808   L005009?:
00CC 22         809            ret
00CD            810   ;------------------------------------------------------------
00CD            811   ;Allocation info for local variables in function 'Serial_Init'
00CD            812   ;------------------------------------------------------------
00CD            813   ;------------------------------------------------------------
00CD            814   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:154: void Serial_Init(void) {
00CD            815   ;        -----------------------------------------
00CD            816   ;         function Serial_Init
00CD            817   ;        -----------------------------------------
00CD            818   _Serial_Init:
00CD            819   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:155: waitms(500); // Give Putty a chance to start.
00CD 9001F4     820            mov     dptr,#0x01F4
00D0 120000     821            lcall   _waitms
00D3            822   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:156: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
00D3 7488       823            mov     a,#__str_0
00D5 C0E0       824            push    acc
00D7 74B8       825            mov     a,#(__str_0 >> 8)
00D9 C0E0       826            push    acc
00DB 7480       827            mov     a,#0x80
00DD C0E0       828            push    acc
00DF 120000     829            lcall   _printf
00E2 1581       830            dec     sp
00E4 1581       831            dec     sp
00E6 1581       832            dec     sp
00E8 22         833            ret
00E9            834   ;------------------------------------------------------------
00E9            835   ;Allocation info for local variables in function 'UART1_Init'
00E9            836   ;------------------------------------------------------------
00E9            837   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00E9            838   ;------------------------------------------------------------
00E9            839   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:159: void UART1_Init (unsigned long baudrate)
00E9            840   ;        -----------------------------------------
00E9            841   ;         function UART1_Init
00E9            842   ;        -----------------------------------------
00E9            843   _UART1_Init:
00E9 AA82       844            mov     r2,dpl
00EB AB83       845            mov     r3,dph
00ED ACF0       846            mov     r4,b
00EF FD         847            mov     r5,a
00F0            848   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:161: SFRPAGE = 0x20;
00F0 75A720     849            mov     _SFRPAGE,#0x20
00F3            850   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:162: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00F3 75930C     851            mov     _SMOD1,#0x0C
00F6            852   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:163: SCON1 = 0x10;
00F6 75C810     853            mov     _SCON1,#0x10
00F9            854   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:164: SBCON1 =0x00;   // disable baud rate generator
00F9 759400     855            mov     _SBCON1,#0x00
00FC            856   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:165: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00FC 8A00       857            mov     __divulong_PARM_2,r2
00FE 8B01       858            mov     (__divulong_PARM_2 + 1),r3
0100 8C02       859            mov     (__divulong_PARM_2 + 2),r4
0102 8D03       860            mov     (__divulong_PARM_2 + 3),r5
0104 90A200     861            mov     dptr,#0xA200
0107 75F04A     862            mov     b,#0x4A
010A 7404       863            mov     a,#0x04
010C 120000     864            lcall   __divulong
010F AA82       865            mov     r2,dpl
0111 AB83       866            mov     r3,dph
0113 ACF0       867            mov     r4,b
0115 FD         868            mov     r5,a
0116 750018     869            mov     __divulong_PARM_2,#0x18
0119 E4         870            clr     a
011A F501       871            mov     (__divulong_PARM_2 + 1),a
011C F502       872            mov     (__divulong_PARM_2 + 2),a
011E F503       873            mov     (__divulong_PARM_2 + 3),a
0120 8A82       874            mov     dpl,r2
0122 8B83       875            mov     dph,r3
0124 8CF0       876            mov     b,r4
0126 ED         877            mov     a,r5
0127 120000     878            lcall   __divulong
012A AA82       879            mov     r2,dpl
012C AB83       880            mov     r3,dph
012E ACF0       881            mov     r4,b
0130 FD         882            mov     r5,a
0131 E4         883            clr     a
0132 C3         884            clr     c
0133 9A         885            subb    a,r2
0134 FA         886            mov     r2,a
0135 E4         887            clr     a
0136 9B         888            subb    a,r3
0137 FB         889            mov     r3,a
0138 7401       890            mov     a,#0x01
013A 9C         891            subb    a,r4
013B E4         892            clr     a
013C 9D         893            subb    a,r5
013D 8A95       894            mov     _SBRL1,r2
013F 8B96       895            mov     (_SBRL1 >> 8),r3
0141            896   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:166: TI1 = 1; // indicate ready for TX
0141 D2C9       897            setb    _TI1
0143            898   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:167: SBCON1 |= 0x40;   // enable baud rate generator
0143 439440     899            orl     _SBCON1,#0x40
0146            900   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:168: SFRPAGE = 0x00;
0146 75A700     901            mov     _SFRPAGE,#0x00
0149 22         902            ret
014A            903   ;------------------------------------------------------------
014A            904   ;Allocation info for local variables in function 'TIMER3Init'
014A            905   ;------------------------------------------------------------
014A            906   ;------------------------------------------------------------
014A            907   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:172: void TIMER3Init(void)
014A            908   ;        -----------------------------------------
014A            909   ;         function TIMER3Init
014A            910   ;        -----------------------------------------
014A            911   _TIMER3Init:
014A            912   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:175: TMR3CN0=0x00;   // Stop Timer3; Clear TF3;
014A 759100     913            mov     _TMR3CN0,#0x00
014D            914   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:176: CKCON0|=0b_0100_0000; // Timer 3 uses the system clock
014D 438E40     915            orl     _CKCON0,#0x40
0150            916   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:177: TMR3RL=(0x10000L-(SYSCLK/(2*TIMER_3_FREQ))); // Initialize reload value
0150 7592F0     917            mov     _TMR3RL,#0xF0
0153 7593F1     918            mov     (_TMR3RL >> 8),#0xF1
0156            919   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:178: TMR3=0xffff;   // Set to reload immediately
0156 7594FF     920            mov     _TMR3,#0xFF
0159 7595FF     921            mov     (_TMR3 >> 8),#0xFF
015C            922   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:179: EIE1|=0b_1000_0000;     // Enable Timer3 interrupts
015C 43E680     923            orl     _EIE1,#0x80
015F            924   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:180: TMR3CN0|=0b_0000_0100;  // Start Timer3 (TMR3CN0 is not bit addressable)
015F 439104     925            orl     _TMR3CN0,#0x04
0162            926   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:181: EA = 1;
0162 D2AF       927            setb    _EA
0164 22         928            ret
0165            929   ;------------------------------------------------------------
0165            930   ;Allocation info for local variables in function 'PWM_manager'
0165            931   ;------------------------------------------------------------
0165            932   ;y_value                   Allocated with name '_PWM_manager_PARM_2'
0165            933   ;x_value                   Allocated to registers r2 r3 r4 r5 
0165            934   ;sloc0                     Allocated with name '_PWM_manager_sloc0_1_0'
0165            935   ;------------------------------------------------------------
0165            936   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:184: void PWM_manager(float x_value, float y_value)
0165            937   ;        -----------------------------------------
0165            938   ;         function PWM_manager
0165            939   ;        -----------------------------------------
0165            940   _PWM_manager:
0165 AA82       941            mov     r2,dpl
0167 AB83       942            mov     r3,dph
0169 ACF0       943            mov     r4,b
016B FD         944            mov     r5,a
016C            945   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:187: if (x_value >= 0) // RIGHT TURN
016C C002       946            push    ar2
016E C003       947            push    ar3
0170 C004       948            push    ar4
0172 C005       949            push    ar5
0174 E4         950            clr     a
0175 C0E0       951            push    acc
0177 C0E0       952            push    acc
0179 C0E0       953            push    acc
017B C0E0       954            push    acc
017D 8A82       955            mov     dpl,r2
017F 8B83       956            mov     dph,r3
0181 8CF0       957            mov     b,r4
0183 ED         958            mov     a,r5
0184 120000     959            lcall   ___fslt
0187 AE82       960            mov     r6,dpl
0189 E581       961            mov     a,sp
018B 24FC       962            add     a,#0xfc
018D F581       963            mov     sp,a
018F D005       964            pop     ar5
0191 D004       965            pop     ar4
0193 D003       966            pop     ar3
0195 D002       967            pop     ar2
0197 EE         968            mov     a,r6
0198 6000       969            jz      L009010?
019A 020000     970            ljmp    L009004?
019D            971   L009010?:
019D            972   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:189: left_wheel = abs(y_value);
019D 850082     973            mov     dpl,_PWM_manager_PARM_2
01A0 850183     974            mov     dph,(_PWM_manager_PARM_2 + 1)
01A3 8502F0     975            mov     b,(_PWM_manager_PARM_2 + 2)
01A6 E503       976            mov     a,(_PWM_manager_PARM_2 + 3)
01A8 C002       977            push    ar2
01AA C003       978            push    ar3
01AC C004       979            push    ar4
01AE C005       980            push    ar5
01B0 120000     981            lcall   ___fs2sint
01B3 858278     982            mov     _PWM_manager_sloc0_1_0,dpl
01B6 858379     983            mov  (_PWM_manager_sloc0_1_0 + 1),dph
01B9 120000     984            lcall   _abs
01BC 120000     985            lcall   ___sint2fs
01BF 858220     986            mov     _left_wheel,dpl
01C2 858321     987            mov     (_left_wheel + 1),dph
01C5 85F022     988            mov     (_left_wheel + 2),b
01C8 F523       989            mov     (_left_wheel + 3),a
01CA D005       990            pop     ar5
01CC D004       991            pop     ar4
01CE D003       992            pop     ar3
01D0 D002       993            pop     ar2
01D2            994   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:190: right_wheel = (100 - abs(x_value)) * abs(y_value) / 100;
01D2 8A82       995            mov     dpl,r2
01D4 8B83       996            mov     dph,r3
01D6 8CF0       997            mov     b,r4
01D8 ED         998            mov     a,r5
01D9 120000     999            lcall   ___fs2sint
01DC 120000    1000            lcall   _abs
01DF A982      1001            mov     r1,dpl
01E1 AF83      1002            mov     r7,dph
01E3 7464      1003            mov     a,#0x64
01E5 C3        1004            clr     c
01E6 99        1005            subb    a,r1
01E7 F9        1006            mov     r1,a
01E8 E4        1007            clr     a
01E9 9F        1008            subb    a,r7
01EA FF        1009            mov     r7,a
01EB 857882    1010            mov     dpl,_PWM_manager_sloc0_1_0
01EE 857983    1011            mov     dph,(_PWM_manager_sloc0_1_0 + 1)
01F1 C007      1012            push    ar7
01F3 C001      1013            push    ar1
01F5 120000    1014            lcall   _abs
01F8 858200    1015            mov     __mulint_PARM_2,dpl
01FB 858301    1016            mov     (__mulint_PARM_2 + 1),dph
01FE D001      1017            pop     ar1
0200 D007      1018            pop     ar7
0202 8982      1019            mov     dpl,r1
0204 8F83      1020            mov     dph,r7
0206 120000    1021            lcall   __mulint
0209 AF82      1022            mov     r7,dpl
020B A883      1023            mov     r0,dph
020D 750064    1024            mov     __divsint_PARM_2,#0x64
0210 E4        1025            clr     a
0211 F501      1026            mov     (__divsint_PARM_2 + 1),a
0213 8F82      1027            mov     dpl,r7
0215 8883      1028            mov     dph,r0
0217 120000    1029            lcall   __divsint
021A 120000    1030            lcall   ___sint2fs
021D 8582E0    1031            mov     _right_wheel,dpl
0220 8583E1    1032            mov     (_right_wheel + 1),dph
0223 85F0E2    1033            mov     (_right_wheel + 2),b
0226 F5E3      1034            mov     (_right_wheel + 3),a
0228 22        1035            ret
0229           1036   L009004?:
0229           1037   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:192: else if (x_value < 0) // LEFT TURN
0229 EE        1038            mov     a,r6
022A 7000      1039            jnz     L009011?
022C 22        1040            ret
022D           1041   L009011?:
022D           1042   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:194: left_wheel = (100 - abs(x_value)) * abs(y_value) / 100;
022D 8A82      1043            mov     dpl,r2
022F 8B83      1044            mov     dph,r3
0231 8CF0      1045            mov     b,r4
0233 ED        1046            mov     a,r5
0234 120000    1047            lcall   ___fs2sint
0237 120000    1048            lcall   _abs
023A AA82      1049            mov     r2,dpl
023C AB83      1050            mov     r3,dph
023E 7464      1051            mov     a,#0x64
0240 C3        1052            clr     c
0241 9A        1053            subb    a,r2
0242 FA        1054            mov     r2,a
0243 E4        1055            clr     a
0244 9B        1056            subb    a,r3
0245 FB        1057            mov     r3,a
0246 850082    1058            mov     dpl,_PWM_manager_PARM_2
0249 850183    1059            mov     dph,(_PWM_manager_PARM_2 + 1)
024C 8502F0    1060            mov     b,(_PWM_manager_PARM_2 + 2)
024F E503      1061            mov     a,(_PWM_manager_PARM_2 + 3)
0251 C002      1062            push    ar2
0253 C003      1063            push    ar3
0255 120000    1064            lcall   ___fs2sint
0258 AC82      1065            mov     r4,dpl
025A AD83      1066            mov  r5,dph
025C C004      1067            push    ar4
025E C005      1068            push    ar5
0260 120000    1069            lcall   _abs
0263 858200    1070            mov     __mulint_PARM_2,dpl
0266 858301    1071            mov     (__mulint_PARM_2 + 1),dph
0269 D005      1072            pop     ar5
026B D004      1073            pop     ar4
026D D003      1074            pop     ar3
026F D002      1075            pop     ar2
0271 8A82      1076            mov     dpl,r2
0273 8B83      1077            mov     dph,r3
0275 C004      1078            push    ar4
0277 C005      1079            push    ar5
0279 120000    1080            lcall   __mulint
027C AA82      1081            mov     r2,dpl
027E AB83      1082            mov     r3,dph
0280 750064    1083            mov     __divsint_PARM_2,#0x64
0283 E4        1084            clr     a
0284 F501      1085            mov     (__divsint_PARM_2 + 1),a
0286 8A82      1086            mov     dpl,r2
0288 8B83      1087            mov     dph,r3
028A 120000    1088            lcall   __divsint
028D 120000    1089            lcall   ___sint2fs
0290 858220    1090            mov     _left_wheel,dpl
0293 858321    1091            mov     (_left_wheel + 1),dph
0296 85F022    1092            mov     (_left_wheel + 2),b
0299 F523      1093            mov     (_left_wheel + 3),a
029B D005      1094            pop     ar5
029D D004      1095            pop     ar4
029F           1096   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:195: right_wheel = abs(y_value);
029F 8C82      1097            mov     dpl,r4
02A1 8D83      1098            mov     dph,r5
02A3 120000    1099            lcall   _abs
02A6 120000    1100            lcall   ___sint2fs
02A9 8582E0    1101            mov     _right_wheel,dpl
02AC 8583E1    1102            mov     (_right_wheel + 1),dph
02AF 85F0E2    1103            mov     (_right_wheel + 2),b
02B2 F5E3      1104            mov     (_right_wheel + 3),a
02B4 22        1105            ret
02B5           1106   ;------------------------------------------------------------
02B5           1107   ;Allocation info for local variables in function 'Timer3_ISR'
02B5           1108   ;------------------------------------------------------------
02B5           1109   ;------------------------------------------------------------
02B5           1110   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:201: void Timer3_ISR (void) interrupt INTERRUPT_TIMER3
02B5           1111   ;        -----------------------------------------
02B5           1112   ;         function Timer3_ISR
02B5           1113   ;        -----------------------------------------
02B5           1114   _Timer3_ISR:
02B5 C068      1115            push    bits
02B7 C0E0      1116            push    acc
02B9 C0F0      1117            push    b
02BB C082      1118            push    dpl
02BD C083      1119            push    dph
02BF C002      1120            push    (0+2)
02C1 C003      1121            push    (0+3)
02C3 C004      1122            push    (0+4)
02C5 C005      1123            push    (0+5)
02C7 C006      1124            push    (0+6)
02C9 C007      1125            push    (0+7)
02CB C000      1126            push    (0+0)
02CD C001      1127            push    (0+1)
02CF C0D0      1128            push    psw
02D1 75D000    1129            mov     psw,#0x00
02D4           1130   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:203: SFRPAGE=0x0;
02D4 75A700    1131            mov     _SFRPAGE,#0x00
02D7           1132   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:204: TMR3CN0&=0b_0011_1111; // Clear Timer3 interrupt flags
02D7 53913F    1133            anl     _TMR3CN0,#0x3F
02DA           1134   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:206: P1_2 = !P1_2;
02DA B292      1135            cpl     _P1_2
02DC           1136   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:212: if (count > 100)
02DC C3        1137            clr     c
02DD 7464      1138            mov     a,#0x64
02DF 9520      1139            subb    a,_count
02E1 E4        1140            clr     a
02E2 6480      1141            xrl     a,#0x80
02E4 8521F0    1142            mov     b,(_count + 1)
02E7 63F080    1143            xrl     b,#0x80
02EA 95F0      1144            subb    a,b
02EC 5000      1145            jnc     L010002?
02EE           1146   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:214: count = 0;
02EE E4        1147            clr     a
02EF F520      1148            mov     _count,a
02F1 F521      1149            mov     (_count + 1),a
02F3           1150   L010002?:
02F3           1151   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:216: LEFT_MOTOR_LHS = (count > left_wheel) ? 0:1;
02F3 852082    1152            mov     dpl,_count
02F6 852183    1153            mov     dph,(_count + 1)
02F9 120000    1154            lcall   ___sint2fs
02FC AA82      1155            mov     r2,dpl
02FE AB83      1156            mov     r3,dph
0300 ACF0      1157            mov     r4,b
0302 FD        1158            mov     r5,a
0303 C002      1159            push    ar2
0305 C003      1160            push    ar3
0307 C004      1161            push    ar4
0309 C005      1162            push    ar5
030B C020      1163            push    _left_wheel
030D C021      1164            push    (_left_wheel + 1)
030F C022      1165            push    (_left_wheel + 2)
0311 C023      1166            push    (_left_wheel + 3)
0313 8A82      1167            mov     dpl,r2
0315 8B83      1168            mov     dph,r3
0317 8CF0      1169            mov     b,r4
0319 ED        1170            mov     a,r5
031A 120000    1171            lcall   ___fsgt
031D E581      1172            mov     a,sp
031F 24FC      1173            add     a,#0xfc
0321 F581      1174            mov     sp,a
0323 D005      1175            pop     ar5
0325 D004      1176            pop     ar4
0327 D003      1177            pop     ar3
0329 D002      1178            pop     ar2
032B E582      1179            mov     a,dpl
032D 24FF      1180            add     a,#0xff
032F 92C8      1181            mov  _Timer3_ISR_sloc0_1_0,c
0331 B3        1182            cpl     c
0332 92A4      1183            mov     _P2_4,c
0334           1184   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:217: RIGHT_MOTOR_LHS = (count > right_wheel) ? 0:1;
0334 C0E0      1185            push    _right_wheel
0336 C0E1      1186            push    (_right_wheel + 1)
0338 C0E2      1187            push    (_right_wheel + 2)
033A C0E3      1188            push    (_right_wheel + 3)
033C 8A82      1189            mov     dpl,r2
033E 8B83      1190            mov     dph,r3
0340 8CF0      1191            mov     b,r4
0342 ED        1192            mov     a,r5
0343 120000    1193            lcall   ___fsgt
0346 E581      1194            mov     a,sp
0348 24FC      1195            add     a,#0xfc
034A F581      1196            mov     sp,a
034C E582      1197            mov     a,dpl
034E 24FF      1198            add     a,#0xff
0350 92C8      1199            mov  _Timer3_ISR_sloc0_1_0,c
0352 B3        1200            cpl     c
0353 92A2      1201            mov     _P2_2,c
0355           1202   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:219: count++;
0355 0520      1203            inc     _count
0357 E4        1204            clr     a
0358 B520A8    1205            cjne    a,_count,L010007?
035B 0521      1206            inc     (_count + 1)
035D           1207   L010007?:
035D D0D0      1208            pop     psw
035F D001      1209            pop     (0+1)
0361 D000      1210            pop     (0+0)
0363 D007      1211            pop     (0+7)
0365 D006      1212            pop     (0+6)
0367 D005      1213            pop     (0+5)
0369 D004      1214            pop     (0+4)
036B D003      1215            pop     (0+3)
036D D002      1216            pop     (0+2)
036F D083      1217            pop     dph
0371 D082      1218            pop     dpl
0373 D0F0      1219            pop     b
0375 D0E0      1220            pop     acc
0377 D068      1221            pop     bits
0379 32        1222            reti
037A           1223   ;------------------------------------------------------------
037A           1224   ;Allocation info for local variables in function 'main'
037A           1225   ;------------------------------------------------------------
037A           1226   ;freq                      Allocated with name '_main_freq_1_85'
037A           1227   ;------------------------------------------------------------
037A           1228   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:224: void main (void)
037A           1229   ;        -----------------------------------------
037A           1230   ;         function main
037A           1231   ;        -----------------------------------------
037A           1232   _main:
037A           1233   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:227: TIMER0_Init();
037A 120000    1234            lcall   _TIMER0_Init
037D           1235   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:228: Serial_Init();
037D 120000    1236            lcall   _Serial_Init
0380           1237   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:229: UART1_Init(9600);
0380 902580    1238            mov     dptr,#0x2580
0383 E4        1239            clr     a
0384 F5F0      1240            mov     b,a
0386 120000    1241            lcall   _UART1_Init
0389           1242   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:230: TIMER3Init();
0389 120000    1243            lcall   _TIMER3Init
038C           1244   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:239: while(1){
038C           1245   L011002?:
038C           1246   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:240: PWM_manager(PWM_percent_x, PWM_percent_y);
038C 856082    1247            mov     dpl,_PWM_percent_x
038F 856183    1248            mov     dph,(_PWM_percent_x + 1)
0392 120000    1249            lcall   ___sint2fs
0395 AA82      1250            mov     r2,dpl
0397 AB83      1251            mov     r3,dph
0399 ACF0      1252            mov     r4,b
039B FD        1253            mov     r5,a
039C 85A082    1254            mov     dpl,_PWM_percent_y
039F 85A183    1255            mov     dph,(_PWM_percent_y + 1)
03A2 C002      1256            push    ar2
03A4 C003      1257            push    ar3
03A6 C004      1258            push    ar4
03A8 C005      1259            push    ar5
03AA 120000    1260            lcall   ___sint2fs
03AD 858200    1261            mov     _PWM_manager_PARM_2,dpl
03B0 858301    1262            mov     (_PWM_manager_PARM_2 + 1),dph
03B3 85F002    1263            mov     (_PWM_manager_PARM_2 + 2),b
03B6 F503      1264            mov     (_PWM_manager_PARM_2 + 3),a
03B8 D005      1265            pop     ar5
03BA D004      1266            pop     ar4
03BC D003      1267            pop     ar3
03BE D002      1268            pop     ar2
03C0 8A82      1269            mov     dpl,r2
03C2 8B83      1270            mov     dph,r3
03C4 8CF0      1271            mov     b,r4
03C6 ED        1272            mov     a,r5
03C7 120000    1273            lcall   _PWM_manager
03CA           1274   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:241: printf("Left Wheel: %f\n", left_wheel);
03CA C020      1275            push    _left_wheel
03CC C021      1276            push    (_left_wheel + 1)
03CE C022      1277            push    (_left_wheel + 2)
03D0 C023      1278            push    (_left_wheel + 3)
03D2 7428      1279            mov     a,#__str_1
03D4 C0E0      1280            push    acc
03D6 74BE      1281            mov     a,#(__str_1 >> 8)
03D8 C0E0      1282            push    acc
03DA 7480      1283            mov     a,#0x80
03DC C0E0      1284            push    acc
03DE 120000    1285            lcall   _printf
03E1 E581      1286            mov     a,sp
03E3 24F9      1287            add     a,#0xf9
03E5 F581      1288            mov     sp,a
03E7           1289   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\test.c:242: printf("Right Wheel: %f\n", right_wheel);
03E7 C0E0      1290            push    _right_wheel
03E9 C0E1      1291            push    (_right_wheel + 1)
03EB C0E2      1292            push    (_right_wheel + 2)
03ED C0E3      1293            push    (_right_wheel + 3)
03EF 7468      1294            mov     a,#__str_2
03F1 C0E0      1295            push    acc
03F3 74BE      1296            mov     a,#(__str_2 >> 8)
03F5 C0E0      1297            push    acc
03F7 7480      1298            mov     a,#0x80
03F9 C0E0      1299            push    acc
03FB 120000    1300            lcall   _printf
03FE E581      1301            mov     a,sp
0400 24F9      1302            add     a,#0xf9
0402 F581      1303            mov     sp,a
0404 8000      1304            sjmp    L011002?
0406           1305            rseg R_CSEG
0406           1306   
0000           1307            rseg R_XINIT
0000           1308   
0000           1309            rseg R_CONST
0000           1310   __str_0:
0000 1B        1311            db 0x1B
0001 5B324A    1312            db '[2J'
0004 00        1313            db 0x00
0005           1314   __str_1:
0005 4C656674  1315            db 'Left Wheel: %f'
     20576865
     656C3A20
     2566
0013 0A        1316            db 0x0A
0014 00        1317            db 0x00
0015           1318   __str_2:
0015 52696768  1319            db 'Right Wheel: %f'
     74205768
     65656C3A
     202566
0024 0A        1320            db 0x0A
0025 00        1321            db 0x00
0026           1322   
0076           1323            CSEG
0076           1324   
0076           1325   end
