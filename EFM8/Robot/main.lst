0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 27 16:38:32 2024
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _RXData
0000             29            public _GetData
0000             30            public _SendFreq
0000             31            public _GetFreq
0000             32            public _calculate_freq_Hz
0000             33            public _calculate_period_s
0000             34            public _JDYInit
0000             35            public _SendATCommand
0000             36            public _waitms_or_RI1
0000             37            public _RXU1
0000             38            public _getstr1
0000             39            public _getchar1_with_timeout
0000             40            public _getchar1
0000             41            public _sendstr1
0000             42            public _putchar1
0000             43            public _UART1_Init
0000             44            public _Serial_Init
0000             45            public _waitms
0000             46            public _Timer3us
0000             47            public _TIMER0_Init
0000             48            public __c51_external_startup
0000             49            public _TX_BUFF
0000             50            public _RX_BUFF
0000             51            public _calculate_period_s_PARM_3
0000             52            public _calculate_period_s_PARM_2
0000             53            public _inductance
0000             54            public _TXInductance
0000             55   ;--------------------------------------------------------
0000             56   ; Special Function Registers
0000             57   ;--------------------------------------------------------
0000             58   _ACC            DATA 0xe0
0000             59   _ADC0ASAH       DATA 0xb6
0000             60   _ADC0ASAL       DATA 0xb5
0000             61   _ADC0ASCF       DATA 0xa1
0000             62   _ADC0ASCT       DATA 0xc7
0000             63   _ADC0CF0        DATA 0xbc
0000             64   _ADC0CF1        DATA 0xb9
0000             65   _ADC0CF2        DATA 0xdf
0000             66   _ADC0CN0        DATA 0xe8
0000             67   _ADC0CN1        DATA 0xb2
0000             68   _ADC0CN2        DATA 0xb3
0000             69   _ADC0GTH        DATA 0xc4
0000             70   _ADC0GTL        DATA 0xc3
0000             71   _ADC0H          DATA 0xbe
0000             72   _ADC0L          DATA 0xbd
0000             73   _ADC0LTH        DATA 0xc6
0000             74   _ADC0LTL        DATA 0xc5
0000             75   _ADC0MX         DATA 0xbb
0000             76   _B              DATA 0xf0
0000             77   _CKCON0         DATA 0x8e
0000             78   _CKCON1         DATA 0xa6
0000             79   _CLEN0          DATA 0xc6
0000             80   _CLIE0          DATA 0xc7
0000             81   _CLIF0          DATA 0xe8
0000             82   _CLKSEL         DATA 0xa9
0000             83   _CLOUT0         DATA 0xd1
0000             84   _CLU0CF         DATA 0xb1
0000             85   _CLU0FN         DATA 0xaf
0000             86   _CLU0MX         DATA 0x84
0000             87   _CLU1CF         DATA 0xb3
0000             88   _CLU1FN         DATA 0xb2
0000             89   _CLU1MX         DATA 0x85
0000             90   _CLU2CF         DATA 0xb6
0000             91   _CLU2FN         DATA 0xb5
0000             92   _CLU2MX         DATA 0x91
0000             93   _CLU3CF         DATA 0xbf
0000             94   _CLU3FN         DATA 0xbe
0000             95   _CLU3MX         DATA 0xae
0000             96   _CMP0CN0        DATA 0x9b
0000             97   _CMP0CN1        DATA 0x99
0000             98   _CMP0MD         DATA 0x9d
0000             99   _CMP0MX         DATA 0x9f
0000            100   _CMP1CN0        DATA 0xbf
0000            101   _CMP1CN1        DATA 0xac
0000            102   _CMP1MD         DATA 0xab
0000            103   _CMP1MX         DATA 0xaa
0000            104   _CRC0CN0        DATA 0xce
0000            105   _CRC0CN1        DATA 0x86
0000            106   _CRC0CNT        DATA 0xd3
0000            107   _CRC0DAT        DATA 0xcb
0000            108   _CRC0FLIP       DATA 0xcf
0000            109   _CRC0IN         DATA 0xca
0000            110   _CRC0ST         DATA 0xd2
0000            111   _DAC0CF0        DATA 0x91
0000            112   _DAC0CF1        DATA 0x92
0000            113   _DAC0H          DATA 0x85
0000            114   _DAC0L          DATA 0x84
0000            115   _DAC1CF0        DATA 0x93
0000            116   _DAC1CF1        DATA 0x94
0000            117   _DAC1H          DATA 0x8a
0000            118   _DAC1L          DATA 0x89
0000            119   _DAC2CF0        DATA 0x95
0000            120   _DAC2CF1        DATA 0x96
0000            121   _DAC2H          DATA 0x8c
0000            122   _DAC2L          DATA 0x8b
0000            123   _DAC3CF0        DATA 0x9a
0000            124   _DAC3CF1        DATA 0x9c
0000            125   _DAC3H          DATA 0x8e
0000            126   _DAC3L          DATA 0x8d
0000            127   _DACGCF0        DATA 0x88
0000            128   _DACGCF1        DATA 0x98
0000            129   _DACGCF2        DATA 0xa2
0000            130   _DERIVID        DATA 0xad
0000            131   _DEVICEID       DATA 0xb5
0000            132   _DPH            DATA 0x83
0000            133   _DPL            DATA 0x82
0000            134   _EIE1           DATA 0xe6
0000            135   _EIE2           DATA 0xf3
0000            136   _EIP1           DATA 0xbb
0000            137   _EIP1H          DATA 0xee
0000            138   _EIP2           DATA 0xed
0000            139   _EIP2H          DATA 0xf6
0000            140   _EMI0CN         DATA 0xe7
0000            141   _FLKEY          DATA 0xb7
0000            142   _HFO0CAL        DATA 0xc7
0000            143   _HFO1CAL        DATA 0xd6
0000            144   _HFOCN          DATA 0xef
0000            145   _I2C0ADM        DATA 0xff
0000            146   _I2C0CN0        DATA 0xba
0000            147   _I2C0DIN        DATA 0xbc
0000            148   _I2C0DOUT       DATA 0xbb
0000            149   _I2C0FCN0       DATA 0xad
0000            150   _I2C0FCN1       DATA 0xab
0000            151   _I2C0FCT        DATA 0xf5
0000            152   _I2C0SLAD       DATA 0xbd
0000            153   _I2C0STAT       DATA 0xb9
0000            154   _IE             DATA 0xa8
0000            155   _IP             DATA 0xb8
0000            156   _IPH            DATA 0xf2
0000            157   _IT01CF         DATA 0xe4
0000            158   _LFO0CN         DATA 0xb1
0000            159   _P0             DATA 0x80
0000            160   _P0MASK         DATA 0xfe
0000            161   _P0MAT          DATA 0xfd
0000            162   _P0MDIN         DATA 0xf1
0000            163   _P0MDOUT        DATA 0xa4
0000            164   _P0SKIP         DATA 0xd4
0000            165   _P1             DATA 0x90
0000            166   _P1MASK         DATA 0xee
0000            167   _P1MAT          DATA 0xed
0000            168   _P1MDIN         DATA 0xf2
0000            169   _P1MDOUT        DATA 0xa5
0000            170   _P1SKIP         DATA 0xd5
0000            171   _P2             DATA 0xa0
0000            172   _P2MASK         DATA 0xfc
0000            173   _P2MAT          DATA 0xfb
0000            174   _P2MDIN         DATA 0xf3
0000            175   _P2MDOUT        DATA 0xa6
0000            176   _P2SKIP         DATA 0xcc
0000            177   _P3             DATA 0xb0
0000            178   _P3MDIN         DATA 0xf4
0000            179   _P3MDOUT        DATA 0x9c
0000            180   _PCA0CENT       DATA 0x9e
0000            181   _PCA0CLR        DATA 0x9c
0000            182   _PCA0CN0        DATA 0xd8
0000            183   _PCA0CPH0       DATA 0xfc
0000            184   _PCA0CPH1       DATA 0xea
0000            185   _PCA0CPH2       DATA 0xec
0000            186   _PCA0CPH3       DATA 0xf5
0000            187   _PCA0CPH4       DATA 0x85
0000            188   _PCA0CPH5       DATA 0xde
0000            189   _PCA0CPL0       DATA 0xfb
0000            190   _PCA0CPL1       DATA 0xe9
0000            191   _PCA0CPL2       DATA 0xeb
0000            192   _PCA0CPL3       DATA 0xf4
0000            193   _PCA0CPL4       DATA 0x84
0000            194   _PCA0CPL5       DATA 0xdd
0000            195   _PCA0CPM0       DATA 0xda
0000            196   _PCA0CPM1       DATA 0xdb
0000            197   _PCA0CPM2       DATA 0xdc
0000            198   _PCA0CPM3       DATA 0xae
0000            199   _PCA0CPM4       DATA 0xaf
0000            200   _PCA0CPM5       DATA 0xcc
0000            201   _PCA0H          DATA 0xfa
0000            202   _PCA0L          DATA 0xf9
0000            203   _PCA0MD         DATA 0xd9
0000            204   _PCA0POL        DATA 0x96
0000            205   _PCA0PWM        DATA 0xf7
0000            206   _PCON0          DATA 0x87
0000            207   _PCON1          DATA 0xcd
0000            208   _PFE0CN         DATA 0xc1
0000            209   _PRTDRV         DATA 0xf6
0000            210   _PSCTL          DATA 0x8f
0000            211   _PSTAT0         DATA 0xaa
0000            212   _PSW            DATA 0xd0
0000            213   _REF0CN         DATA 0xd1
0000            214   _REG0CN         DATA 0xc9
0000            215   _REVID          DATA 0xb6
0000            216   _RSTSRC         DATA 0xef
0000            217   _SBCON1         DATA 0x94
0000            218   _SBRLH1         DATA 0x96
0000            219   _SBRLL1         DATA 0x95
0000            220   _SBUF           DATA 0x99
0000            221   _SBUF0          DATA 0x99
0000            222   _SBUF1          DATA 0x92
0000            223   _SCON           DATA 0x98
0000            224   _SCON0          DATA 0x98
0000            225   _SCON1          DATA 0xc8
0000            226   _SFRPAGE        DATA 0xa7
0000            227   _SFRPGCN        DATA 0xbc
0000            228   _SFRSTACK       DATA 0xd7
0000            229   _SMB0ADM        DATA 0xd6
0000            230   _SMB0ADR        DATA 0xd7
0000            231   _SMB0CF         DATA 0xc1
0000            232   _SMB0CN0        DATA 0xc0
0000            233   _SMB0DAT        DATA 0xc2
0000            234   _SMB0FCN0       DATA 0xc3
0000            235   _SMB0FCN1       DATA 0xc4
0000            236   _SMB0FCT        DATA 0xef
0000            237   _SMB0RXLN       DATA 0xc5
0000            238   _SMB0TC         DATA 0xac
0000            239   _SMOD1          DATA 0x93
0000            240   _SP             DATA 0x81
0000            241   _SPI0CFG        DATA 0xa1
0000            242   _SPI0CKR        DATA 0xa2
0000            243   _SPI0CN0        DATA 0xf8
0000            244   _SPI0DAT        DATA 0xa3
0000            245   _SPI0FCN0       DATA 0x9a
0000            246   _SPI0FCN1       DATA 0x9b
0000            247   _SPI0FCT        DATA 0xf7
0000            248   _SPI0PCF        DATA 0xdf
0000            249   _TCON           DATA 0x88
0000            250   _TH0            DATA 0x8c
0000            251   _TH1            DATA 0x8d
0000            252   _TL0            DATA 0x8a
0000            253   _TL1            DATA 0x8b
0000            254   _TMOD           DATA 0x89
0000            255   _TMR2CN0        DATA 0xc8
0000            256   _TMR2CN1        DATA 0xfd
0000            257   _TMR2H          DATA 0xcf
0000            258   _TMR2L          DATA 0xce
0000            259   _TMR2RLH        DATA 0xcb
0000            260   _TMR2RLL        DATA 0xca
0000            261   _TMR3CN0        DATA 0x91
0000            262   _TMR3CN1        DATA 0xfe
0000            263   _TMR3H          DATA 0x95
0000            264   _TMR3L          DATA 0x94
0000            265   _TMR3RLH        DATA 0x93
0000            266   _TMR3RLL        DATA 0x92
0000            267   _TMR4CN0        DATA 0x98
0000            268   _TMR4CN1        DATA 0xff
0000            269   _TMR4H          DATA 0xa5
0000            270   _TMR4L          DATA 0xa4
0000            271   _TMR4RLH        DATA 0xa3
0000            272   _TMR4RLL        DATA 0xa2
0000            273   _TMR5CN0        DATA 0xc0
0000            274   _TMR5CN1        DATA 0xf1
0000            275   _TMR5H          DATA 0xd5
0000            276   _TMR5L          DATA 0xd4
0000            277   _TMR5RLH        DATA 0xd3
0000            278   _TMR5RLL        DATA 0xd2
0000            279   _UART0PCF       DATA 0xd9
0000            280   _UART1FCN0      DATA 0x9d
0000            281   _UART1FCN1      DATA 0xd8
0000            282   _UART1FCT       DATA 0xfa
0000            283   _UART1LIN       DATA 0x9e
0000            284   _UART1PCF       DATA 0xda
0000            285   _VDM0CN         DATA 0xff
0000            286   _WDTCN          DATA 0x97
0000            287   _XBR0           DATA 0xe1
0000            288   _XBR1           DATA 0xe2
0000            289   _XBR2           DATA 0xe3
0000            290   _XOSC0CN        DATA 0x86
0000            291   _DPTR           DATA 0x8382
0000            292   _TMR2RL         DATA 0xcbca
0000            293   _TMR3RL         DATA 0x9392
0000            294   _TMR4RL         DATA 0xa3a2
0000            295   _TMR5RL         DATA 0xd3d2
0000            296   _TMR0           DATA 0x8c8a
0000            297   _TMR1           DATA 0x8d8b
0000            298   _TMR2           DATA 0xcfce
0000            299   _TMR3           DATA 0x9594
0000            300   _TMR4           DATA 0xa5a4
0000            301   _TMR5           DATA 0xd5d4
0000            302   _SBRL1          DATA 0x9695
0000            303   _PCA0           DATA 0xfaf9
0000            304   _PCA0CP0        DATA 0xfcfb
0000            305   _PCA0CP1        DATA 0xeae9
0000            306   _PCA0CP2        DATA 0xeceb
0000            307   _PCA0CP3        DATA 0xf5f4
0000            308   _PCA0CP4        DATA 0x8584
0000            309   _PCA0CP5        DATA 0xdedd
0000            310   _ADC0ASA        DATA 0xb6b5
0000            311   _ADC0GT         DATA 0xc4c3
0000            312   _ADC0           DATA 0xbebd
0000            313   _ADC0LT         DATA 0xc6c5
0000            314   _DAC0           DATA 0x8584
0000            315   _DAC1           DATA 0x8a89
0000            316   _DAC2           DATA 0x8c8b
0000            317   _DAC3           DATA 0x8e8d
0000            318   ;--------------------------------------------------------
0000            319   ; special function bits
0000            320   ;--------------------------------------------------------
0000            321   _ACC_0          BIT 0xe0
0000            322   _ACC_1          BIT 0xe1
0000            323   _ACC_2          BIT 0xe2
0000            324   _ACC_3          BIT 0xe3
0000            325   _ACC_4          BIT 0xe4
0000            326   _ACC_5          BIT 0xe5
0000            327   _ACC_6          BIT 0xe6
0000            328   _ACC_7          BIT 0xe7
0000            329   _TEMPE          BIT 0xe8
0000            330   _ADGN0          BIT 0xe9
0000            331   _ADGN1          BIT 0xea
0000            332   _ADWINT         BIT 0xeb
0000            333   _ADBUSY         BIT 0xec
0000            334   _ADINT          BIT 0xed
0000            335   _IPOEN          BIT 0xee
0000            336   _ADEN           BIT 0xef
0000            337   _B_0            BIT 0xf0
0000            338   _B_1            BIT 0xf1
0000            339   _B_2            BIT 0xf2
0000            340   _B_3            BIT 0xf3
0000            341   _B_4            BIT 0xf4
0000            342   _B_5            BIT 0xf5
0000            343   _B_6            BIT 0xf6
0000            344   _B_7            BIT 0xf7
0000            345   _C0FIF          BIT 0xe8
0000            346   _C0RIF          BIT 0xe9
0000            347   _C1FIF          BIT 0xea
0000            348   _C1RIF          BIT 0xeb
0000            349   _C2FIF          BIT 0xec
0000            350   _C2RIF          BIT 0xed
0000            351   _C3FIF          BIT 0xee
0000            352   _C3RIF          BIT 0xef
0000            353   _D1SRC0         BIT 0x88
0000            354   _D1SRC1         BIT 0x89
0000            355   _D1AMEN         BIT 0x8a
0000            356   _D01REFSL       BIT 0x8b
0000            357   _D3SRC0         BIT 0x8c
0000            358   _D3SRC1         BIT 0x8d
0000            359   _D3AMEN         BIT 0x8e
0000            360   _D23REFSL       BIT 0x8f
0000            361   _D0UDIS         BIT 0x98
0000            362   _D1UDIS         BIT 0x99
0000            363   _D2UDIS         BIT 0x9a
0000            364   _D3UDIS         BIT 0x9b
0000            365   _EX0            BIT 0xa8
0000            366   _ET0            BIT 0xa9
0000            367   _EX1            BIT 0xaa
0000            368   _ET1            BIT 0xab
0000            369   _ES0            BIT 0xac
0000            370   _ET2            BIT 0xad
0000            371   _ESPI0          BIT 0xae
0000            372   _EA             BIT 0xaf
0000            373   _PX0            BIT 0xb8
0000            374   _PT0            BIT 0xb9
0000            375   _PX1            BIT 0xba
0000            376   _PT1            BIT 0xbb
0000            377   _PS0            BIT 0xbc
0000            378   _PT2            BIT 0xbd
0000            379   _PSPI0          BIT 0xbe
0000            380   _P0_0           BIT 0x80
0000            381   _P0_1           BIT 0x81
0000            382   _P0_2           BIT 0x82
0000            383   _P0_3           BIT 0x83
0000            384   _P0_4           BIT 0x84
0000            385   _P0_5           BIT 0x85
0000            386   _P0_6           BIT 0x86
0000            387   _P0_7           BIT 0x87
0000            388   _P1_0           BIT 0x90
0000            389   _P1_1           BIT 0x91
0000            390   _P1_2           BIT 0x92
0000            391   _P1_3           BIT 0x93
0000            392   _P1_4           BIT 0x94
0000            393   _P1_5           BIT 0x95
0000            394   _P1_6           BIT 0x96
0000            395   _P1_7           BIT 0x97
0000            396   _P2_0           BIT 0xa0
0000            397   _P2_1           BIT 0xa1
0000            398   _P2_2           BIT 0xa2
0000            399   _P2_3           BIT 0xa3
0000            400   _P2_4           BIT 0xa4
0000            401   _P2_5           BIT 0xa5
0000            402   _P2_6           BIT 0xa6
0000            403   _P3_0           BIT 0xb0
0000            404   _P3_1           BIT 0xb1
0000            405   _P3_2           BIT 0xb2
0000            406   _P3_3           BIT 0xb3
0000            407   _P3_4           BIT 0xb4
0000            408   _P3_7           BIT 0xb7
0000            409   _CCF0           BIT 0xd8
0000            410   _CCF1           BIT 0xd9
0000            411   _CCF2           BIT 0xda
0000            412   _CCF3           BIT 0xdb
0000            413   _CCF4           BIT 0xdc
0000            414   _CCF5           BIT 0xdd
0000            415   _CR             BIT 0xde
0000            416   _CF             BIT 0xdf
0000            417   _PARITY         BIT 0xd0
0000            418   _F1             BIT 0xd1
0000            419   _OV             BIT 0xd2
0000            420   _RS0            BIT 0xd3
0000            421   _RS1            BIT 0xd4
0000            422   _F0             BIT 0xd5
0000            423   _AC             BIT 0xd6
0000            424   _CY             BIT 0xd7
0000            425   _RI             BIT 0x98
0000            426   _TI             BIT 0x99
0000            427   _RB8            BIT 0x9a
0000            428   _TB8            BIT 0x9b
0000            429   _REN            BIT 0x9c
0000            430   _CE             BIT 0x9d
0000            431   _SMODE          BIT 0x9e
0000            432   _RI1            BIT 0xc8
0000            433   _TI1            BIT 0xc9
0000            434   _RBX1           BIT 0xca
0000            435   _TBX1           BIT 0xcb
0000            436   _REN1           BIT 0xcc
0000            437   _PERR1          BIT 0xcd
0000            438   _OVR1           BIT 0xce
0000            439   _SI             BIT 0xc0
0000            440   _ACK            BIT 0xc1
0000            441   _ARBLOST        BIT 0xc2
0000            442   _ACKRQ          BIT 0xc3
0000            443   _STO            BIT 0xc4
0000            444   _STA            BIT 0xc5
0000            445   _TXMODE         BIT 0xc6
0000            446   _MASTER         BIT 0xc7
0000            447   _SPIEN          BIT 0xf8
0000            448   _TXNF           BIT 0xf9
0000            449   _NSSMD0         BIT 0xfa
0000            450   _NSSMD1         BIT 0xfb
0000            451   _RXOVRN         BIT 0xfc
0000            452   _MODF           BIT 0xfd
0000            453   _WCOL           BIT 0xfe
0000            454   _SPIF           BIT 0xff
0000            455   _IT0            BIT 0x88
0000            456   _IE0            BIT 0x89
0000            457   _IT1            BIT 0x8a
0000            458   _IE1            BIT 0x8b
0000            459   _TR0            BIT 0x8c
0000            460   _TF0            BIT 0x8d
0000            461   _TR1            BIT 0x8e
0000            462   _TF1            BIT 0x8f
0000            463   _T2XCLK0        BIT 0xc8
0000            464   _T2XCLK1        BIT 0xc9
0000            465   _TR2            BIT 0xca
0000            466   _T2SPLIT        BIT 0xcb
0000            467   _TF2CEN         BIT 0xcc
0000            468   _TF2LEN         BIT 0xcd
0000            469   _TF2L           BIT 0xce
0000            470   _TF2H           BIT 0xcf
0000            471   _T4XCLK0        BIT 0x98
0000            472   _T4XCLK1        BIT 0x99
0000            473   _TR4            BIT 0x9a
0000            474   _T4SPLIT        BIT 0x9b
0000            475   _TF4CEN         BIT 0x9c
0000            476   _TF4LEN         BIT 0x9d
0000            477   _TF4L           BIT 0x9e
0000            478   _TF4H           BIT 0x9f
0000            479   _T5XCLK0        BIT 0xc0
0000            480   _T5XCLK1        BIT 0xc1
0000            481   _TR5            BIT 0xc2
0000            482   _T5SPLIT        BIT 0xc3
0000            483   _TF5CEN         BIT 0xc4
0000            484   _TF5LEN         BIT 0xc5
0000            485   _TF5L           BIT 0xc6
0000            486   _TF5H           BIT 0xc7
0000            487   _RIE            BIT 0xd8
0000            488   _RXTO0          BIT 0xd9
0000            489   _RXTO1          BIT 0xda
0000            490   _RFRQ           BIT 0xdb
0000            491   _TIE            BIT 0xdc
0000            492   _TXHOLD         BIT 0xdd
0000            493   _TXNF1          BIT 0xde
0000            494   _TFRQ           BIT 0xdf
0000            495   ;--------------------------------------------------------
0000            496   ; overlayable register banks
0000            497   ;--------------------------------------------------------
0000            498            rbank0 segment data overlay
0000            499   ;--------------------------------------------------------
0000            500   ; internal ram data
0000            501   ;--------------------------------------------------------
0000            502            rseg R_DSEG
0000            503   _inductance:
0000            504            ds 2
0002            505   _calculate_period_s_PARM_2:
0002            506            ds 2
0004            507   _calculate_period_s_PARM_3:
0004            508            ds 2
0006            509   ;--------------------------------------------------------
0006            510   ; overlayable items in internal ram 
0006            511   ;--------------------------------------------------------
0000            512            rseg    R_OSEG
0000            513            rseg    R_OSEG
0000            514            rseg    R_OSEG
0000            515   ;--------------------------------------------------------
0000            516   ; indirectly addressable internal ram data
0000            517   ;--------------------------------------------------------
0000            518            rseg R_ISEG
0000            519   _RX_BUFF:
0000            520            ds 80
0050            521   _TX_BUFF:
0050            522            ds 80
00A0            523   ;--------------------------------------------------------
00A0            524   ; absolute internal ram data
00A0            525   ;--------------------------------------------------------
0000            526            DSEG
0000            527   ;--------------------------------------------------------
0000            528   ; bit data
0000            529   ;--------------------------------------------------------
0000            530            rseg R_BSEG
0000            531   ;--------------------------------------------------------
0000            532   ; paged external ram data
0000            533   ;--------------------------------------------------------
0000            534            rseg R_PSEG
0000            535   ;--------------------------------------------------------
0000            536   ; external ram data
0000            537   ;--------------------------------------------------------
0000            538            rseg R_XSEG
0000            539   ;--------------------------------------------------------
0000            540   ; absolute external ram data
0000            541   ;--------------------------------------------------------
0000            542            XSEG
0000            543   ;--------------------------------------------------------
0000            544   ; external initialized ram data
0000            545   ;--------------------------------------------------------
0000            546            rseg R_IXSEG
0000            547            rseg R_HOME
0000            548            rseg R_GSINIT
0000            549            rseg R_CSEG
0000            550   ;--------------------------------------------------------
0000            551   ; Reset entry point and interrupt vectors
0000            552   ;--------------------------------------------------------
0000            553            CSEG at 0x0000
0000 020000     554            ljmp    _crt0
0003            555   ;--------------------------------------------------------
0003            556   ; global & static initialisations
0003            557   ;--------------------------------------------------------
0000            558            rseg R_HOME
0000            559            rseg R_GSINIT
0000            560            rseg R_GSINIT
0000            561   ;--------------------------------------------------------
0000            562   ; data variables initialization
0000            563   ;--------------------------------------------------------
0000            564            rseg R_DINIT
0000            565   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:25: volatile int inductance = 0;
0000 E4         566            clr     a
0001 F5B8       567            mov     _inductance,a
0003 F5B9       568            mov     (_inductance + 1),a
0005            569            ; The linker places a 'ret' at the end of segment R_DINIT.
0005            570   ;--------------------------------------------------------
0005            571   ; code
0005            572   ;--------------------------------------------------------
0000            573            rseg R_CSEG
0000            574   ;------------------------------------------------------------
0000            575   ;Allocation info for local variables in function '_c51_external_startup'
0000            576   ;------------------------------------------------------------
0000            577   ;------------------------------------------------------------
0000            578   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:29: char _c51_external_startup (void) {
0000            579   ;        -----------------------------------------
0000            580   ;         function _c51_external_startup
0000            581   ;        -----------------------------------------
0000            582   __c51_external_startup:
0000            583            using   0
0000            584   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:31: SFRPAGE = 0x00;
0000 75A700     585            mov     _SFRPAGE,#0x00
0003            586   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:32: WDTCN = 0xDE; //First key
0003 7597DE     587            mov     _WDTCN,#0xDE
0006            588   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:33: WDTCN = 0xAD; //Second key
0006 7597AD     589            mov     _WDTCN,#0xAD
0009            590   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:35: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     591            mov     _VDM0CN,#0x80
000C            592   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:36: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     593            mov     _RSTSRC,#0x06
000F            594   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:43: SFRPAGE = 0x10;
000F 75A710     595            mov     _SFRPAGE,#0x10
0012            596   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:44: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     597            mov     _PFE0CN,#0x20
0015            598   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:45: SFRPAGE = 0x00;
0015 75A700     599            mov     _SFRPAGE,#0x00
0018            600   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:66: CLKSEL = 0x00;
0018 75A900     601            mov     _CLKSEL,#0x00
001B            602   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:67: CLKSEL = 0x00;
001B 75A900     603            mov     _CLKSEL,#0x00
001E            604   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:68: while ((CLKSEL & 0x80) == 0);
001E            605   L002001?:
001E E5A9       606            mov     a,_CLKSEL
0020 30E740     607            jnb     acc.7,L002001?
0023            608   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:69: CLKSEL = 0x03;
0023 75A903     609            mov     _CLKSEL,#0x03
0026            610   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:70: CLKSEL = 0x03;
0026 75A903     611            mov     _CLKSEL,#0x03
0029            612   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:71: while ((CLKSEL & 0x80) == 0);
0029            613   L002004?:
0029 E5A9       614            mov     a,_CLKSEL
002B 30E7C0     615            jnb     acc.7,L002004?
002E            616   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:76: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     617            orl     _P0MDOUT,#0x11
0031            618   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:77: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     619            orl     _P2MDOUT,#0x01
0034            620   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:78: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0034 75E101     621            mov     _XBR0,#0x01
0037            622   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:79: XBR1     = 0X00;
0037 75E200     623            mov     _XBR1,#0x00
003A            624   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:80: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     625            mov     _XBR2,#0x41
003D            626   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:86: SCON0 = 0x10;
003D 759810     627            mov     _SCON0,#0x10
0040            628   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:87: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     629            mov     _TH1,#0xE6
0043            630   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:88: TL1 = TH1;      // Init Timer1
0043 858D8B     631            mov     _TL1,_TH1
0046            632   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:89: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     633            anl     _TMOD,#0x0F
0049            634   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:90: TMOD |=  0x20;
0049 438920     635            orl     _TMOD,#0x20
004C            636   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:91: TR1 = 1; // START Timer1
004C D28E       637            setb    _TR1
004E            638   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:92: TI = 1;  // Indicate TX0 ready
004E D299       639            setb    _TI
0050            640   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:94: return 0;
0050 758200     641            mov     dpl,#0x00
0053 22         642            ret
0054            643   ;------------------------------------------------------------
0054            644   ;Allocation info for local variables in function 'TIMER0_Init'
0054            645   ;------------------------------------------------------------
0054            646   ;------------------------------------------------------------
0054            647   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:96: void TIMER0_Init(void) {
0054            648   ;        -----------------------------------------
0054            649   ;         function TIMER0_Init
0054            650   ;        -----------------------------------------
0054            651   _TIMER0_Init:
0054            652   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:97: TMOD &= 0b_1111_0000; // Set the Bits of Timer/Counter 0 to 0
0054 5389F0     653            anl     _TMOD,#0xF0
0057            654   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:98: TMOD |= 0b_0000_0001; // Timer/Counter 0 Used As 16-Bit Timer
0057 438901     655            orl     _TMOD,#0x01
005A            656   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:99: TR0 = 0; // Stop Timer/Counter 0
005A C28C       657            clr     _TR0
005C 22         658            ret
005D            659   ;------------------------------------------------------------
005D            660   ;Allocation info for local variables in function 'Timer3us'
005D            661   ;------------------------------------------------------------
005D            662   ;us                        Allocated to registers r2 
005D            663   ;i                         Allocated to registers r3 
005D            664   ;------------------------------------------------------------
005D            665   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:108: void Timer3us(unsigned char us)
005D            666   ;        -----------------------------------------
005D            667   ;         function Timer3us
005D            668   ;        -----------------------------------------
005D            669   _Timer3us:
005D AA82       670            mov     r2,dpl
005F            671   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:113: CKCON0|=0b_0100_0000;
005F 438E40     672            orl     _CKCON0,#0x40
0062            673   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:115: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0062 7592B8     674            mov     _TMR3RL,#0xB8
0065 7593FF     675            mov     (_TMR3RL >> 8),#0xFF
0068            676   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:116: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0068 859294     677            mov     _TMR3,_TMR3RL
006B 859395     678            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
006E            679   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:118: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
006E 759104     680            mov     _TMR3CN0,#0x04
0071            681   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:119: for (i = 0; i < us; i++)       // Count <us> overflows
0071 7B00       682            mov     r3,#0x00
0073            683   L004004?:
0073 C3         684            clr     c
0074 EB         685            mov     a,r3
0075 9A         686            subb    a,r2
0076 5000       687            jnc     L004007?
0078            688   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:121: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0078            689   L004001?:
0078 E591       690            mov     a,_TMR3CN0
007A 30E7C0     691            jnb     acc.7,L004001?
007D            692   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:122: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
007D 53917F     693            anl     _TMR3CN0,#0x7F
0080            694   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:119: for (i = 0; i < us; i++)       // Count <us> overflows
0080 0B         695            inc     r3
0081 8000       696            sjmp    L004004?
0083            697   L004007?:
0083            698   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:124: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0083 759100     699            mov     _TMR3CN0,#0x00
0086 22         700            ret
0087            701   ;------------------------------------------------------------
0087            702   ;Allocation info for local variables in function 'waitms'
0087            703   ;------------------------------------------------------------
0087            704   ;ms                        Allocated to registers r2 r3 
0087            705   ;j                         Allocated to registers r4 r5 
0087            706   ;k                         Allocated to registers r6 
0087            707   ;------------------------------------------------------------
0087            708   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:127: void waitms (unsigned int ms)
0087            709   ;        -----------------------------------------
0087            710   ;         function waitms
0087            711   ;        -----------------------------------------
0087            712   _waitms:
0087 AA82       713            mov     r2,dpl
0089 AB83       714            mov     r3,dph
008B            715   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:131: for(j=0; j<ms; j++)
008B 7C00       716            mov     r4,#0x00
008D 7D00       717            mov     r5,#0x00
008F            718   L005005?:
008F C3         719            clr     c
0090 EC         720            mov     a,r4
0091 9A         721            subb    a,r2
0092 ED         722            mov     a,r5
0093 9B         723            subb    a,r3
0094 5000       724            jnc     L005009?
0096            725   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:132: for (k=0; k<4; k++) Timer3us(250);
0096 7E00       726            mov     r6,#0x00
0098            727   L005001?:
0098 BE0400     728            cjne    r6,#0x04,L005018?
009B            729   L005018?:
009B 5000       730            jnc     L005007?
009D 7582FA     731            mov     dpl,#0xFA
00A0 C002       732            push    ar2
00A2 C003       733            push    ar3
00A4 C004       734            push    ar4
00A6 C005       735            push    ar5
00A8 C006       736            push    ar6
00AA 120000     737            lcall   _Timer3us
00AD D006       738            pop     ar6
00AF D005       739            pop     ar5
00B1 D004       740            pop     ar4
00B3 D003       741            pop     ar3
00B5 D002       742            pop     ar2
00B7 0E         743            inc     r6
00B8 8000       744            sjmp    L005001?
00BA            745   L005007?:
00BA            746   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:131: for(j=0; j<ms; j++)
00BA 0C         747            inc     r4
00BB BC0040     748            cjne    r4,#0x00,L005005?
00BE 0D         749            inc     r5
00BF 8000       750            sjmp    L005005?
00C1            751   L005009?:
00C1 22         752            ret
00C2            753   ;------------------------------------------------------------
00C2            754   ;Allocation info for local variables in function 'Serial_Init'
00C2            755   ;------------------------------------------------------------
00C2            756   ;------------------------------------------------------------
00C2            757   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:135: void Serial_Init(void) {
00C2            758   ;        -----------------------------------------
00C2            759   ;         function Serial_Init
00C2            760   ;        -----------------------------------------
00C2            761   _Serial_Init:
00C2            762   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:136: waitms(500); // Give Putty a chance to start.
00C2 9001F4     763            mov     dptr,#0x01F4
00C5 120000     764            lcall   _waitms
00C8            765   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:137: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
00C8 7480       766            mov     a,#__str_0
00CA C0E0       767            push    acc
00CC 74B6       768            mov     a,#(__str_0 >> 8)
00CE C0E0       769            push    acc
00D0 7480       770            mov     a,#0x80
00D2 C0E0       771            push    acc
00D4 120000     772            lcall   _printf
00D7 1581       773            dec     sp
00D9 1581       774            dec     sp
00DB 1581       775            dec     sp
00DD 22         776            ret
00DE            777   ;------------------------------------------------------------
00DE            778   ;Allocation info for local variables in function 'UART1_Init'
00DE            779   ;------------------------------------------------------------
00DE            780   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00DE            781   ;------------------------------------------------------------
00DE            782   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:140: void UART1_Init (unsigned long baudrate)
00DE            783   ;        -----------------------------------------
00DE            784   ;         function UART1_Init
00DE            785   ;        -----------------------------------------
00DE            786   _UART1_Init:
00DE AA82       787            mov     r2,dpl
00E0 AB83       788            mov     r3,dph
00E2 ACF0       789            mov     r4,b
00E4 FD         790            mov     r5,a
00E5            791   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:142: SFRPAGE = 0x20;
00E5 75A720     792            mov     _SFRPAGE,#0x20
00E8            793   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:143: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00E8 75930C     794            mov     _SMOD1,#0x0C
00EB            795   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:144: SCON1 = 0x10;
00EB 75C810     796            mov     _SCON1,#0x10
00EE            797   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:145: SBCON1 =0x00;   // disable baud rate generator
00EE 759400     798            mov     _SBCON1,#0x00
00F1            799   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:146: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00F1 8A00       800            mov     __divulong_PARM_2,r2
00F3 8B01       801            mov     (__divulong_PARM_2 + 1),r3
00F5 8C02       802            mov     (__divulong_PARM_2 + 2),r4
00F7 8D03       803            mov     (__divulong_PARM_2 + 3),r5
00F9 90A200     804            mov     dptr,#0xA200
00FC 75F04A     805            mov     b,#0x4A
00FF 7404       806            mov     a,#0x04
0101 120000     807            lcall   __divulong
0104 AA82       808            mov     r2,dpl
0106 AB83       809            mov     r3,dph
0108 ACF0       810            mov     r4,b
010A FD         811            mov     r5,a
010B 750018     812            mov     __divulong_PARM_2,#0x18
010E E4         813            clr     a
010F F501       814            mov     (__divulong_PARM_2 + 1),a
0111 F502       815            mov     (__divulong_PARM_2 + 2),a
0113 F503       816            mov     (__divulong_PARM_2 + 3),a
0115 8A82       817            mov     dpl,r2
0117 8B83       818            mov     dph,r3
0119 8CF0       819            mov     b,r4
011B ED         820            mov     a,r5
011C 120000     821            lcall   __divulong
011F AA82       822            mov     r2,dpl
0121 AB83       823            mov     r3,dph
0123 ACF0       824            mov     r4,b
0125 FD         825            mov     r5,a
0126 E4         826            clr     a
0127 C3         827            clr     c
0128 9A         828            subb    a,r2
0129 FA         829            mov     r2,a
012A E4         830            clr     a
012B 9B         831            subb    a,r3
012C FB         832            mov     r3,a
012D 7401       833            mov     a,#0x01
012F 9C         834            subb    a,r4
0130 E4         835            clr     a
0131 9D         836            subb    a,r5
0132 8A95       837            mov     _SBRL1,r2
0134 8B96       838            mov     (_SBRL1 >> 8),r3
0136            839   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:147: TI1 = 1; // indicate ready for TX
0136 D2C9       840            setb    _TI1
0138            841   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:148: SBCON1 |= 0x40;   // enable baud rate generator
0138 439440     842            orl     _SBCON1,#0x40
013B            843   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:149: SFRPAGE = 0x00;
013B 75A700     844            mov     _SFRPAGE,#0x00
013E 22         845            ret
013F            846   ;------------------------------------------------------------
013F            847   ;Allocation info for local variables in function 'putchar1'
013F            848   ;------------------------------------------------------------
013F            849   ;c                         Allocated to registers r2 
013F            850   ;------------------------------------------------------------
013F            851   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:152: void putchar1 (char c)
013F            852   ;        -----------------------------------------
013F            853   ;         function putchar1
013F            854   ;        -----------------------------------------
013F            855   _putchar1:
013F AA82       856            mov     r2,dpl
0141            857   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:154: SFRPAGE = 0x20;
0141 75A720     858            mov     _SFRPAGE,#0x20
0144            859   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:155: while (!TI1);
0144            860   L008001?:
0144            861   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:156: TI1=0;
0144 10C950     862            jbc     _TI1,L008008?
0147 8000       863            sjmp    L008001?
0149            864   L008008?:
0149            865   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:157: SBUF1 = c;
0149 8A92       866            mov     _SBUF1,r2
014B            867   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:158: SFRPAGE = 0x00;
014B 75A700     868            mov     _SFRPAGE,#0x00
014E 22         869            ret
014F            870   ;------------------------------------------------------------
014F            871   ;Allocation info for local variables in function 'sendstr1'
014F            872   ;------------------------------------------------------------
014F            873   ;s                         Allocated to registers r2 r3 r4 
014F            874   ;------------------------------------------------------------
014F            875   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:161: void sendstr1 (char * s)
014F            876   ;        -----------------------------------------
014F            877   ;         function sendstr1
014F            878   ;        -----------------------------------------
014F            879   _sendstr1:
014F AA82       880            mov     r2,dpl
0151 AB83       881            mov     r3,dph
0153 ACF0       882            mov     r4,b
0155            883   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:163: while(*s)
0155            884   L009001?:
0155 8A82       885            mov     dpl,r2
0157 8B83       886            mov     dph,r3
0159 8CF0       887            mov     b,r4
015B 120000     888            lcall   __gptrget
015E FD         889            mov     r5,a
015F 6000       890            jz      L009004?
0161            891   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:165: putchar1(*s);
0161 8D82       892            mov     dpl,r5
0163 C002       893            push    ar2
0165 C003       894            push    ar3
0167 C004       895            push    ar4
0169 120000     896            lcall   _putchar1
016C D004       897            pop     ar4
016E D003       898            pop     ar3
0170 D002       899            pop     ar2
0172            900   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:166: s++;
0172 0A         901            inc     r2
0173 BA0090     902            cjne    r2,#0x00,L009001?
0176 0B         903            inc     r3
0177 8000       904            sjmp    L009001?
0179            905   L009004?:
0179 22         906            ret
017A            907   ;------------------------------------------------------------
017A            908   ;Allocation info for local variables in function 'getchar1'
017A            909   ;------------------------------------------------------------
017A            910   ;c                         Allocated to registers 
017A            911   ;------------------------------------------------------------
017A            912   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:170: char getchar1 (void)
017A            913   ;        -----------------------------------------
017A            914   ;         function getchar1
017A            915   ;        -----------------------------------------
017A            916   _getchar1:
017A            917   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:173: SFRPAGE = 0x20;
017A 75A720     918            mov     _SFRPAGE,#0x20
017D            919   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:174: while (!RI1);
017D            920   L010001?:
017D            921   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:175: RI1=0;
017D 10C890     922            jbc     _RI1,L010008?
0180 8000       923            sjmp    L010001?
0182            924   L010008?:
0182            925   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:177: SCON1&=0b_0011_1111;
0182 53C83F     926            anl     _SCON1,#0x3F
0185            927   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:178: c = SBUF1;
0185 859282     928            mov     dpl,_SBUF1
0188            929   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:179: SFRPAGE = 0x00;
0188 75A700     930            mov     _SFRPAGE,#0x00
018B            931   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:180: return (c);
018B 22         932            ret
018C            933   ;------------------------------------------------------------
018C            934   ;Allocation info for local variables in function 'getchar1_with_timeout'
018C            935   ;------------------------------------------------------------
018C            936   ;c                         Allocated to registers 
018C            937   ;timeout                   Allocated to registers r2 r3 
018C            938   ;------------------------------------------------------------
018C            939   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:183: char getchar1_with_timeout (void)
018C            940   ;        -----------------------------------------
018C            941   ;         function getchar1_with_timeout
018C            942   ;        -----------------------------------------
018C            943   _getchar1_with_timeout:
018C            944   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:187: SFRPAGE = 0x20;
018C 75A720     945            mov     _SFRPAGE,#0x20
018F            946   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:189: while (!RI1)
018F 7A00       947            mov     r2,#0x00
0191 7B00       948            mov     r3,#0x00
0193            949   L011003?:
0193 20C810     950            jb      _RI1,L011005?
0196            951   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:191: SFRPAGE = 0x00;
0196 75A700     952            mov     _SFRPAGE,#0x00
0199            953   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:192: Timer3us(20);
0199 758214     954            mov     dpl,#0x14
019C C002       955            push    ar2
019E C003       956            push    ar3
01A0 120000     957            lcall   _Timer3us
01A3 D003       958            pop     ar3
01A5 D002       959            pop     ar2
01A7            960   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:193: SFRPAGE = 0x20;
01A7 75A720     961            mov     _SFRPAGE,#0x20
01AA            962   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:194: timeout++;
01AA 0A         963            inc     r2
01AB BA0050     964            cjne    r2,#0x00,L011012?
01AE 0B         965            inc     r3
01AF            966   L011012?:
01AF            967   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:195: if(timeout==25000)
01AF BAA8D0     968            cjne    r2,#0xA8,L011003?
01B2 BB61D0     969            cjne    r3,#0x61,L011003?
01B5            970   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:197: SFRPAGE = 0x00;
01B5 75A700     971            mov     _SFRPAGE,#0x00
01B8            972   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:198: return ('\n'); // Timeout after half second
01B8 75820A     973            mov     dpl,#0x0A
01BB 22         974            ret
01BC            975   L011005?:
01BC            976   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:201: RI1=0;
01BC C2C8       977            clr     _RI1
01BE            978   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:203: SCON1&=0b_0011_1111;
01BE 53C83F     979            anl     _SCON1,#0x3F
01C1            980   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:204: c = SBUF1;
01C1 859282     981            mov     dpl,_SBUF1
01C4            982   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:205: SFRPAGE = 0x00;
01C4 75A700     983            mov     _SFRPAGE,#0x00
01C7            984   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:206: return (c);
01C7 22         985            ret
01C8            986   ;------------------------------------------------------------
01C8            987   ;Allocation info for local variables in function 'getstr1'
01C8            988   ;------------------------------------------------------------
01C8            989   ;s                         Allocated to registers r2 r3 r4 
01C8            990   ;c                         Allocated to registers r5 
01C8            991   ;------------------------------------------------------------
01C8            992   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:209: void getstr1 (char * s)
01C8            993   ;        -----------------------------------------
01C8            994   ;         function getstr1
01C8            995   ;        -----------------------------------------
01C8            996   _getstr1:
01C8 AA82       997            mov     r2,dpl
01CA AB83       998            mov     r3,dph
01CC ACF0       999            mov     r4,b
01CE           1000   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:213: while(1)
01CE           1001   L012004?:
01CE           1002   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:215: c=getchar1_with_timeout();
01CE C002      1003            push    ar2
01D0 C003      1004            push    ar3
01D2 C004      1005            push    ar4
01D4 120000    1006            lcall   _getchar1_with_timeout
01D7 AD82      1007            mov     r5,dpl
01D9 D004      1008            pop     ar4
01DB D003      1009            pop     ar3
01DD D002      1010            pop     ar2
01DF           1011   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:216: if(c=='\n')
01DF BD0AD0    1012            cjne    r5,#0x0A,L012002?
01E2           1013   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:218: *s=0;
01E2 8A82      1014            mov     dpl,r2
01E4 8B83      1015            mov     dph,r3
01E6 8CF0      1016            mov     b,r4
01E8 E4        1017            clr     a
01E9           1018   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:219: return;
01E9 020000    1019            ljmp    __gptrput
01EC           1020   L012002?:
01EC           1021   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:221: *s=c;
01EC 8A82      1022            mov     dpl,r2
01EE 8B83      1023            mov     dph,r3
01F0 8CF0      1024            mov     b,r4
01F2 ED        1025            mov     a,r5
01F3 120000    1026            lcall   __gptrput
01F6 A3        1027            inc     dptr
01F7 AA82      1028            mov     r2,dpl
01F9 AB83      1029            mov     r3,dph
01FB           1030   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:222: s++;
01FB 8000      1031            sjmp    L012004?
01FD           1032   ;------------------------------------------------------------
01FD           1033   ;Allocation info for local variables in function 'RXU1'
01FD           1034   ;------------------------------------------------------------
01FD           1035   ;------------------------------------------------------------
01FD           1036   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:227: bit RXU1 (void)
01FD           1037   ;        -----------------------------------------
01FD           1038   ;         function RXU1
01FD           1039   ;        -----------------------------------------
01FD           1040   _RXU1:
01FD           1041   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:230: SFRPAGE = 0x20;
01FD 75A720    1042            mov     _SFRPAGE,#0x20
0200           1043   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:231: mybit=RI1;
0200 A2C8      1044            mov     c,_RI1
0202           1045   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:232: SFRPAGE = 0x00;
0202 75A700    1046            mov     _SFRPAGE,#0x00
0205           1047   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:233: return mybit;
0205 22        1048            ret
0206           1049   ;------------------------------------------------------------
0206           1050   ;Allocation info for local variables in function 'waitms_or_RI1'
0206           1051   ;------------------------------------------------------------
0206           1052   ;ms                        Allocated to registers r2 r3 
0206           1053   ;j                         Allocated to registers r4 r5 
0206           1054   ;k                         Allocated to registers r6 
0206           1055   ;------------------------------------------------------------
0206           1056   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:236: void waitms_or_RI1 (unsigned int ms)
0206           1057   ;        -----------------------------------------
0206           1058   ;         function waitms_or_RI1
0206           1059   ;        -----------------------------------------
0206           1060   _waitms_or_RI1:
0206 AA82      1061            mov     r2,dpl
0208 AB83      1062            mov     r3,dph
020A           1063   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:240: for(j=0; j<ms; j++)
020A 7C00      1064            mov     r4,#0x00
020C 7D00      1065            mov     r5,#0x00
020E           1066   L014007?:
020E C3        1067            clr     c
020F EC        1068            mov     a,r4
0210 9A        1069            subb    a,r2
0211 ED        1070            mov     a,r5
0212 9B        1071            subb    a,r3
0213 5000      1072            jnc     L014011?
0215           1073   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:242: for (k=0; k<4; k++)
0215 7E00      1074            mov     r6,#0x00
0217           1075   L014003?:
0217 BE0410    1076            cjne    r6,#0x04,L014019?
021A           1077   L014019?:
021A 5000      1078            jnc     L014009?
021C           1079   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:244: if(RXU1()) return;
021C C002      1080            push    ar2
021E C003      1081            push    ar3
0220 C004      1082            push    ar4
0222 C005      1083            push    ar5
0224 C006      1084            push    ar6
0226 120000    1085            lcall   _RXU1
0229 E4        1086            clr     a
022A 33        1087            rlc     a
022B D006      1088            pop     ar6
022D D005      1089            pop     ar5
022F D004      1090            pop     ar4
0231 D003      1091            pop     ar3
0233 D002      1092            pop     ar2
0235 6000      1093            jz      L014002?
0237 22        1094            ret
0238           1095   L014002?:
0238           1096   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:245: Timer3us(250);
0238 7582FA    1097            mov     dpl,#0xFA
023B C002      1098            push    ar2
023D C003      1099            push    ar3
023F C004      1100            push    ar4
0241 C005      1101            push    ar5
0243 C006      1102            push    ar6
0245 120000    1103            lcall   _Timer3us
0248 D006      1104            pop     ar6
024A D005      1105            pop     ar5
024C D004      1106            pop     ar4
024E D003      1107            pop     ar3
0250 D002      1108            pop     ar2
0252           1109   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:242: for (k=0; k<4; k++)
0252 0E        1110            inc     r6
0253 8000      1111            sjmp    L014003?
0255           1112   L014009?:
0255           1113   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:240: for(j=0; j<ms; j++)
0255 0C        1114            inc     r4
0256 BC0050    1115            cjne    r4,#0x00,L014007?
0259 0D        1116            inc     r5
025A 8000      1117            sjmp    L014007?
025C           1118   L014011?:
025C 22        1119            ret
025D           1120   ;------------------------------------------------------------
025D           1121   ;Allocation info for local variables in function 'SendATCommand'
025D           1122   ;------------------------------------------------------------
025D           1123   ;s                         Allocated to registers r2 r3 r4 
025D           1124   ;------------------------------------------------------------
025D           1125   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:250: void SendATCommand (char * s)
025D           1126   ;        -----------------------------------------
025D           1127   ;         function SendATCommand
025D           1128   ;        -----------------------------------------
025D           1129   _SendATCommand:
025D AA82      1130            mov     r2,dpl
025F AB83      1131            mov     r3,dph
0261 ACF0      1132            mov     r4,b
0263           1133   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:252: printf("Command: %s", s);
0263 C002      1134            push    ar2
0265 C003      1135            push    ar3
0267 C004      1136            push    ar4
0269 C002      1137            push    ar2
026B C003      1138            push    ar3
026D C004      1139            push    ar4
026F 74D0      1140            mov     a,#__str_1
0271 C0E0      1141            push    acc
0273 74BC      1142            mov     a,#(__str_1 >> 8)
0275 C0E0      1143            push    acc
0277 7480      1144            mov     a,#0x80
0279 C0E0      1145            push    acc
027B 120000    1146            lcall   _printf
027E E581      1147            mov     a,sp
0280 24FA      1148            add     a,#0xfa
0282 F581      1149            mov     sp,a
0284           1150   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:253: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0284 C2A0      1151            clr     _P2_0
0286           1152   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:254: waitms(5);
0286 900005    1153            mov     dptr,#0x0005
0289 120000    1154            lcall   _waitms
028C D004      1155            pop     ar4
028E D003      1156            pop     ar3
0290 D002      1157            pop     ar2
0292           1158   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:255: sendstr1(s);
0292 8A82      1159            mov     dpl,r2
0294 8B83      1160            mov     dph,r3
0296 8CF0      1161            mov     b,r4
0298 120000    1162            lcall   _sendstr1
029B           1163   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:256: getstr1(TX_BUFF);
029B 904498    1164            mov     dptr,#_TX_BUFF
029E 75F040    1165            mov     b,#0x40
02A1 120000    1166            lcall   _getstr1
02A4           1167   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:257: waitms(10);
02A4 90000A    1168            mov     dptr,#0x000A
02A7 120000    1169            lcall   _waitms
02AA           1170   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:258: P2_0=1; // 'set' pin to 1 is normal operation mode.
02AA D2A0      1171            setb    _P2_0
02AC           1172   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:259: printf("Response: %s\r\n", TX_BUFF);
02AC 7498      1173            mov     a,#_TX_BUFF
02AE C0E0      1174            push    acc
02B0 7444      1175            mov     a,#(_TX_BUFF >> 8)
02B2 C0E0      1176            push    acc
02B4 7440      1177            mov     a,#0x40
02B6 C0E0      1178            push    acc
02B8 7410      1179            mov     a,#__str_2
02BA C0E0      1180            push    acc
02BC 74BD      1181            mov     a,#(__str_2 >> 8)
02BE C0E0      1182            push    acc
02C0 7480      1183            mov     a,#0x80
02C2 C0E0      1184            push    acc
02C4 120000    1185            lcall   _printf
02C7 E581      1186            mov     a,sp
02C9 24FA      1187            add     a,#0xfa
02CB F581      1188            mov     sp,a
02CD 22        1189            ret
02CE           1190   ;------------------------------------------------------------
02CE           1191   ;Allocation info for local variables in function 'JDYInit'
02CE           1192   ;------------------------------------------------------------
02CE           1193   ;------------------------------------------------------------
02CE           1194   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:262: void JDYInit (void){
02CE           1195   ;        -----------------------------------------
02CE           1196   ;         function JDYInit
02CE           1197   ;        -----------------------------------------
02CE           1198   _JDYInit:
02CE           1199   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:263: SendATCommand("AT+DVIDAFAF\r\n");
02CE 90BD50    1200            mov     dptr,#__str_3
02D1 75F080    1201            mov     b,#0x80
02D4 120000    1202            lcall   _SendATCommand
02D7           1203   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:264: SendATCommand("AT+RFIDFFBB\r\n");
02D7 90BD90    1204            mov     dptr,#__str_4
02DA 75F080    1205            mov     b,#0x80
02DD 120000    1206            lcall   _SendATCommand
02E0           1207   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:266: SendATCommand("AT+VER\r\n");
02E0 90BDD0    1208            mov     dptr,#__str_5
02E3 75F080    1209            mov     b,#0x80
02E6 120000    1210            lcall   _SendATCommand
02E9           1211   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:267: SendATCommand("AT+BAUD\r\n");
02E9 90BE10    1212            mov     dptr,#__str_6
02EC 75F080    1213            mov     b,#0x80
02EF 120000    1214            lcall   _SendATCommand
02F2           1215   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:268: SendATCommand("AT+RFID\r\n");
02F2 90BE50    1216            mov     dptr,#__str_7
02F5 75F080    1217            mov     b,#0x80
02F8 120000    1218            lcall   _SendATCommand
02FB           1219   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:269: SendATCommand("AT+DVID\r\n");
02FB 90BE90    1220            mov     dptr,#__str_8
02FE 75F080    1221            mov     b,#0x80
0301 120000    1222            lcall   _SendATCommand
0304           1223   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:270: SendATCommand("AT+RFC\r\n");
0304 90BED0    1224            mov     dptr,#__str_9
0307 75F080    1225            mov     b,#0x80
030A 120000    1226            lcall   _SendATCommand
030D           1227   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:271: SendATCommand("AT+POWE\r\n");
030D 90BF10    1228            mov     dptr,#__str_10
0310 75F080    1229            mov     b,#0x80
0313 120000    1230            lcall   _SendATCommand
0316           1231   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:272: SendATCommand("AT+CLSS\r\n");
0316 90BF50    1232            mov     dptr,#__str_11
0319 75F080    1233            mov     b,#0x80
031C 020000    1234            ljmp    _SendATCommand
031F           1235   ;------------------------------------------------------------
031F           1236   ;Allocation info for local variables in function 'calculate_period_s'
031F           1237   ;------------------------------------------------------------
031F           1238   ;TH0                       Allocated with name '_calculate_period_s_PARM_2'
031F           1239   ;TL0                       Allocated with name '_calculate_period_s_PARM_3'
031F           1240   ;overflow_count            Allocated to registers r2 r3 
031F           1241   ;------------------------------------------------------------
031F           1242   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:275: float calculate_period_s(int overflow_count, int TH0, int TL0) {
031F           1243   ;        -----------------------------------------
031F           1244   ;         function calculate_period_s
031F           1245   ;        -----------------------------------------
031F           1246   _calculate_period_s:
031F           1247   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:276: return ((overflow_count * MAX_16_BIT)  + (TH0 * MAX_8_BIT) + TL0) * (12.0 / SYSCLK);
031F 120000    1248            lcall   ___sint2fs
0322 AA82      1249            mov     r2,dpl
0324 AB83      1250            mov     r3,dph
0326 ACF0      1251            mov     r4,b
0328 FD        1252            mov     r5,a
0329 C002      1253            push    ar2
032B C003      1254            push    ar3
032D C004      1255            push    ar4
032F C005      1256            push    ar5
0331 900000    1257            mov     dptr,#0x0000
0334 75F080    1258            mov     b,#0x80
0337 7447      1259            mov     a,#0x47
0339 120000    1260            lcall   ___fsmul
033C AA82      1261            mov     r2,dpl
033E AB83      1262            mov     r3,dph
0340 ACF0      1263            mov     r4,b
0342 FD        1264            mov     r5,a
0343 E581      1265            mov     a,sp
0345 24FC      1266            add     a,#0xfc
0347 F581      1267            mov     sp,a
0349 857882    1268            mov     dpl,_calculate_period_s_PARM_2
034C 857983    1269            mov     dph,(_calculate_period_s_PARM_2 + 1)
034F C002      1270            push    ar2
0351 C003      1271            push    ar3
0353 C004      1272            push    ar4
0355 C005      1273            push    ar5
0357 120000    1274            lcall   ___sint2fs
035A AE82      1275            mov     r6,dpl
035C AF83      1276            mov     r7,dph
035E A8F0      1277            mov     r0,b
0360 F9        1278            mov     r1,a
0361 C006      1279            push    ar6
0363 C007      1280            push    ar7
0365 C000      1281            push    ar0
0367 C001      1282            push    ar1
0369 900000    1283            mov     dptr,#0x0000
036C 75F080    1284            mov     b,#0x80
036F 7443      1285            mov     a,#0x43
0371 120000    1286            lcall   ___fsmul
0374 AE82      1287            mov     r6,dpl
0376 AF83      1288            mov     r7,dph
0378 A8F0      1289            mov     r0,b
037A F9        1290            mov     r1,a
037B E581      1291            mov     a,sp
037D 24FC      1292            add     a,#0xfc
037F F581      1293            mov     sp,a
0381 D005      1294            pop     ar5
0383 D004      1295            pop     ar4
0385 D003      1296            pop     ar3
0387 D002      1297            pop     ar2
0389 C006      1298            push    ar6
038B C007      1299            push    ar7
038D C000      1300            push    ar0
038F C001      1301            push    ar1
0391 8A82      1302            mov     dpl,r2
0393 8B83      1303            mov     dph,r3
0395 8CF0      1304            mov     b,r4
0397 ED        1305            mov     a,r5
0398 120000    1306            lcall   ___fsadd
039B AA82      1307            mov     r2,dpl
039D AB83      1308            mov     r3,dph
039F ACF0      1309            mov     r4,b
03A1 FD        1310            mov     r5,a
03A2 E581      1311            mov     a,sp
03A4 24FC      1312            add     a,#0xfc
03A6 F581      1313            mov     sp,a
03A8 852882    1314            mov     dpl,_calculate_period_s_PARM_3
03AB 852983    1315            mov     dph,(_calculate_period_s_PARM_3 + 1)
03AE C002      1316            push    ar2
03B0 C003      1317            push    ar3
03B2 C004      1318            push    ar4
03B4 C005      1319            push    ar5
03B6 120000    1320            lcall   ___sint2fs
03B9 AE82      1321            mov     r6,dpl
03BB AF83      1322            mov     r7,dph
03BD A8F0      1323            mov     r0,b
03BF F9        1324            mov     r1,a
03C0 D005      1325            pop     ar5
03C2 D004      1326            pop     ar4
03C4 D003      1327            pop     ar3
03C6 D002      1328            pop     ar2
03C8 C006      1329            push    ar6
03CA C007      1330            push    ar7
03CC C000      1331            push    ar0
03CE C001      1332            push    ar1
03D0 8A82      1333            mov     dpl,r2
03D2 8B83      1334            mov     dph,r3
03D4 8CF0      1335            mov     b,r4
03D6 ED        1336            mov     a,r5
03D7 120000    1337            lcall   ___fsadd
03DA AA82      1338            mov     r2,dpl
03DC AB83      1339            mov     r3,dph
03DE ACF0      1340            mov     r4,b
03E0 FD        1341            mov     r5,a
03E1 E581      1342            mov     a,sp
03E3 24FC      1343            add     a,#0xfc
03E5 F581      1344            mov     sp,a
03E7 C002      1345            push    ar2
03E9 C003      1346            push    ar3
03EB C004      1347            push    ar4
03ED C005      1348            push    ar5
03EF 90F4FC    1349            mov     dptr,#0xF4FC
03F2 75F032    1350            mov     b,#0x32
03F5 7434      1351            mov     a,#0x34
03F7 120000    1352            lcall   ___fsmul
03FA AA82      1353            mov     r2,dpl
03FC AB83      1354            mov     r3,dph
03FE ACF0      1355            mov     r4,b
0400 FD        1356            mov     r5,a
0401 E581      1357            mov     a,sp
0403 24FC      1358            add     a,#0xfc
0405 F581      1359            mov     sp,a
0407 8A82      1360            mov     dpl,r2
0409 8B83      1361            mov     dph,r3
040B 8CF0      1362            mov     b,r4
040D ED        1363            mov     a,r5
040E 22        1364            ret
040F           1365   ;------------------------------------------------------------
040F           1366   ;Allocation info for local variables in function 'calculate_freq_Hz'
040F           1367   ;------------------------------------------------------------
040F           1368   ;period_s                  Allocated to registers r2 r3 r4 r5 
040F           1369   ;------------------------------------------------------------
040F           1370   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:279: float calculate_freq_Hz(float period_s) {
040F           1371   ;        -----------------------------------------
040F           1372   ;         function calculate_freq_Hz
040F           1373   ;        -----------------------------------------
040F           1374   _calculate_freq_Hz:
040F AA82      1375            mov     r2,dpl
0411 AB83      1376            mov     r3,dph
0413 ACF0      1377            mov     r4,b
0415 FD        1378            mov     r5,a
0416           1379   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:280: return (1.0 / period_s);
0416 C002      1380            push    ar2
0418 C003      1381            push    ar3
041A C004      1382            push    ar4
041C C005      1383            push    ar5
041E 900000    1384            mov     dptr,#0x0000
0421 75F080    1385            mov     b,#0x80
0424 743F      1386            mov     a,#0x3F
0426 120000    1387            lcall   ___fsdiv
0429 AA82      1388            mov     r2,dpl
042B AB83      1389            mov     r3,dph
042D ACF0      1390            mov     r4,b
042F FD        1391            mov     r5,a
0430 E581      1392            mov     a,sp
0432 24FC      1393            add     a,#0xfc
0434 F581      1394            mov     sp,a
0436 8A82      1395            mov     dpl,r2
0438 8B83      1396            mov     dph,r3
043A 8CF0      1397            mov     b,r4
043C ED        1398            mov     a,r5
043D 22        1399            ret
043E           1400   ;------------------------------------------------------------
043E           1401   ;Allocation info for local variables in function 'GetFreq'
043E           1402   ;------------------------------------------------------------
043E           1403   ;period_s                  Allocated to registers r2 r3 r4 r5 
043E           1404   ;freq_Hz                   Allocated to registers r2 r3 r4 r5 
043E           1405   ;overflow_count            Allocated to registers r2 r3 
043E           1406   ;------------------------------------------------------------
043E           1407   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:283: float GetFreq(void) {
043E           1408   ;        -----------------------------------------
043E           1409   ;         function GetFreq
043E           1410   ;        -----------------------------------------
043E           1411   _GetFreq:
043E           1412   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:286: TL0 = 0;
043E 758A00    1413            mov     _TL0,#0x00
0441           1414   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:287: TH0 = 0;
0441 758C00    1415            mov     _TH0,#0x00
0444           1416   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:288: TF0 = 0;
0444 C28D      1417            clr     _TF0
0446           1418   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:291: while (EFM8_SIGNAL != 0); // Wait for Signal == 0
0446           1419   L019001?:
0446 209090    1420            jb      _P1_0,L019001?
0449           1421   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:292: while (EFM8_SIGNAL != 1); // Wait for Signal == 1
0449           1422   L019004?:
0449 3090D0    1423            jnb     _P1_0,L019004?
044C           1424   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:294: TR0 = 1; // Start Timer
044C D28C      1425            setb    _TR0
044E           1426   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:296: while (EFM8_SIGNAL != 0) { // Wait for Signal == 0
044E 7A00      1427            mov     r2,#0x00
0450 7B00      1428            mov     r3,#0x00
0452           1429   L019009?:
0452 309050    1430            jnb     _P1_0,L019026?
0455           1431   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:297: if (TF0 == 1) { // Did 16-Bit Timer Overflow?
0455           1432   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:298: TF0 = 0;
0455 108D90    1433            jbc     _TF0,L019033?
0458 8000      1434            sjmp    L019009?
045A           1435   L019033?:
045A           1436   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:299: overflow_count++;
045A 0A        1437            inc     r2
045B BA0010    1438            cjne    r2,#0x00,L019009?
045E 0B        1439            inc     r3
045F           1440   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:302: while (EFM8_SIGNAL != 1) { // Wait for Signal == 1
045F 8000      1441            sjmp    L019009?
0461           1442   L019026?:
0461           1443   L019014?:
0461 209010    1444            jb      _P1_0,L019016?
0464           1445   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:303: if (TF0 == 1) { // Did 16-Bit Timer Overflow?
0464           1446   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:304: TF0 = 0;
0464 108D50    1447            jbc     _TF0,L019035?
0467 8000      1448            sjmp    L019014?
0469           1449   L019035?:
0469           1450   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:305: overflow_count++;
0469 0A        1451            inc     r2
046A BA00D0    1452            cjne    r2,#0x00,L019014?
046D 0B        1453            inc     r3
046E 8000      1454            sjmp    L019014?
0470           1455   L019016?:
0470           1456   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:309: TR0 = 0; // Stop Timer 0. The 24-bit number [overflow_count-TH0-TL0] has the period!
0470 C28C      1457            clr     _TR0
0472           1458   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:310: period_s = calculate_period_s(overflow_count, TH0, TL0);
0472 858C78    1459            mov     _calculate_period_s_PARM_2,_TH0
0475 757900    1460            mov     (_calculate_period_s_PARM_2 + 1),#0x00
0478 858A28    1461            mov     _calculate_period_s_PARM_3,_TL0
047B 752900    1462            mov     (_calculate_period_s_PARM_3 + 1),#0x00
047E 8A82      1463            mov     dpl,r2
0480 8B83      1464            mov     dph,r3
0482 120000    1465            lcall   _calculate_period_s
0485           1466   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:311: freq_Hz = calculate_freq_Hz(period_s);
0485           1467   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:312: return freq_Hz;
0485 020000    1468            ljmp    _calculate_freq_Hz
0488           1469   ;------------------------------------------------------------
0488           1470   ;Allocation info for local variables in function 'SendFreq'
0488           1471   ;------------------------------------------------------------
0488           1472   ;freq                      Allocated to registers r2 r3 r4 r5 
0488           1473   ;------------------------------------------------------------
0488           1474   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:315: void SendFreq(float freq){
0488           1475   ;        -----------------------------------------
0488           1476   ;         function SendFreq
0488           1477   ;        -----------------------------------------
0488           1478   _SendFreq:
0488 AA82      1479            mov     r2,dpl
048A AB83      1480            mov     r3,dph
048C ACF0      1481            mov     r4,b
048E FD        1482            mov     r5,a
048F           1483   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:316: sprintf(TX_BUFF,"%.3f",freq);
048F C002      1484            push    ar2
0491 C003      1485            push    ar3
0493 C004      1486            push    ar4
0495 C005      1487            push    ar5
0497 7490      1488            mov     a,#__str_12
0499 C0E0      1489            push    acc
049B 74C2      1490            mov     a,#(__str_12 >> 8)
049D C0E0      1491            push    acc
049F 7480      1492            mov     a,#0x80
04A1 C0E0      1493            push    acc
04A3 7498      1494            mov     a,#_TX_BUFF
04A5 C0E0      1495            push    acc
04A7 7444      1496            mov     a,#(_TX_BUFF >> 8)
04A9 C0E0      1497            push    acc
04AB 7440      1498            mov     a,#0x40
04AD C0E0      1499            push    acc
04AF 120000    1500            lcall   _sprintf
04B2 E581      1501            mov     a,sp
04B4 24F6      1502            add     a,#0xf6
04B6 F581      1503            mov     sp,a
04B8           1504   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:317: sendstr1(TX_BUFF);
04B8 904498    1505            mov     dptr,#_TX_BUFF
04BB 75F040    1506            mov     b,#0x40
04BE 120000    1507            lcall   _sendstr1
04C1           1508   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:318: waitms_or_RI1(100);
04C1 900064    1509            mov     dptr,#0x0064
04C4 020000    1510            ljmp    _waitms_or_RI1
04C7           1511   ;------------------------------------------------------------
04C7           1512   ;Allocation info for local variables in function 'GetData'
04C7           1513   ;------------------------------------------------------------
04C7           1514   ;------------------------------------------------------------
04C7           1515   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:321: void GetData(void){
04C7           1516   ;        -----------------------------------------
04C7           1517   ;         function GetData
04C7           1518   ;        -----------------------------------------
04C7           1519   _GetData:
04C7           1520   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:322: if (RXU1()){
04C7 120000    1521            lcall   _RXU1
04CA 5000      1522            jnc     L021003?
04CC           1523   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:323: getstr1(RX_BUFF);
04CC 9044D8    1524            mov     dptr,#_RX_BUFF
04CF 75F040    1525            mov     b,#0x40
04D2 120000    1526            lcall   _getstr1
04D5           1527   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:324: printf("%s \r\n",RX_BUFF);
04D5 74D8      1528            mov     a,#_RX_BUFF
04D7 C0E0      1529            push    acc
04D9 7444      1530            mov     a,#(_RX_BUFF >> 8)
04DB C0E0      1531            push    acc
04DD 7440      1532            mov     a,#0x40
04DF C0E0      1533            push    acc
04E1 7450      1534            mov     a,#__str_13
04E3 C0E0      1535            push    acc
04E5 74C3      1536            mov     a,#(__str_13 >> 8)
04E7 C0E0      1537            push    acc
04E9 7480      1538            mov     a,#0x80
04EB C0E0      1539            push    acc
04ED 120000    1540            lcall   _printf
04F0 E581      1541            mov     a,sp
04F2 24FA      1542            add     a,#0xfa
04F4 F581      1543            mov     sp,a
04F6           1544   L021003?:
04F6 22        1545            ret
04F7           1546   ;------------------------------------------------------------
04F7           1547   ;Allocation info for local variables in function 'RXData'
04F7           1548   ;------------------------------------------------------------
04F7           1549   ;------------------------------------------------------------
04F7           1550   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:328: void RXData(void){
04F7           1551   ;        -----------------------------------------
04F7           1552   ;         function RXData
04F7           1553   ;        -----------------------------------------
04F7           1554   _RXData:
04F7           1555   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:329: if (RXU1()){
04F7 120000    1556            lcall   _RXU1
04FA 5000      1557            jnc     L022003?
04FC           1558   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:330: getstr1(RX_BUFF);
04FC 9044D8    1559            mov     dptr,#_RX_BUFF
04FF 75F040    1560            mov     b,#0x40
0502 120000    1561            lcall   _getstr1
0505           1562   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:331: printf("%s\r\n",RX_BUFF);
0505 74D8      1563            mov     a,#_RX_BUFF
0507 C0E0      1564            push    acc
0509 7444      1565            mov     a,#(_RX_BUFF >> 8)
050B C0E0      1566            push    acc
050D 7440      1567            mov     a,#0x40
050F C0E0      1568            push    acc
0511 74D0      1569            mov     a,#__str_14
0513 C0E0      1570            push    acc
0515 74C3      1571            mov     a,#(__str_14 >> 8)
0517 C0E0      1572            push    acc
0519 7480      1573            mov     a,#0x80
051B C0E0      1574            push    acc
051D 120000    1575            lcall   _printf
0520 E581      1576            mov     a,sp
0522 24FA      1577            add     a,#0xfa
0524 F581      1578            mov     sp,a
0526           1579   L022003?:
0526 22        1580            ret
0527           1581   ;------------------------------------------------------------
0527           1582   ;Allocation info for local variables in function 'TXInductance'
0527           1583   ;------------------------------------------------------------
0527           1584   ;------------------------------------------------------------
0527           1585   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:337: void TXInductance(void){
0527           1586   ;        -----------------------------------------
0527           1587   ;         function TXInductance
0527           1588   ;        -----------------------------------------
0527           1589   _TXInductance:
0527           1590   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:338: sprintf(TX_BUFF,"%d",inductance);
0527 C0B8      1591            push    _inductance
0529 C0B9      1592            push    (_inductance + 1)
052B 7410      1593            mov     a,#__str_15
052D C0E0      1594            push    acc
052F 74C4      1595            mov     a,#(__str_15 >> 8)
0531 C0E0      1596            push    acc
0533 7480      1597            mov     a,#0x80
0535 C0E0      1598            push    acc
0537 7498      1599            mov     a,#_TX_BUFF
0539 C0E0      1600            push    acc
053B 7444      1601            mov     a,#(_TX_BUFF >> 8)
053D C0E0      1602            push    acc
053F 7440      1603            mov     a,#0x40
0541 C0E0      1604            push    acc
0543 120000    1605            lcall   _sprintf
0546 E581      1606            mov     a,sp
0548 24F8      1607            add     a,#0xf8
054A F581      1608            mov     sp,a
054C           1609   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:339: sendstr1(TX_BUFF);
054C 904498    1610            mov     dptr,#_TX_BUFF
054F 75F040    1611            mov     b,#0x40
0552 120000    1612            lcall   _sendstr1
0555           1613   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:340: waitms_or_RI1(500);
0555 9001F4    1614            mov     dptr,#0x01F4
0558 020000    1615            ljmp    _waitms_or_RI1
055B           1616   ;------------------------------------------------------------
055B           1617   ;Allocation info for local variables in function 'main'
055B           1618   ;------------------------------------------------------------
055B           1619   ;freq                      Allocated with name '_main_freq_1_121'
055B           1620   ;------------------------------------------------------------
055B           1621   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:343: void main (void)
055B           1622   ;        -----------------------------------------
055B           1623   ;         function main
055B           1624   ;        -----------------------------------------
055B           1625   _main:
055B           1626   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:346: TIMER0_Init();
055B 120000    1627            lcall   _TIMER0_Init
055E           1628   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:347: Serial_Init();
055E 120000    1629            lcall   _Serial_Init
0561           1630   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:348: UART1_Init(9600);
0561 902580    1631            mov     dptr,#0x2580
0564 E4        1632            clr     a
0565 F5F0      1633            mov     b,a
0567 120000    1634            lcall   _UART1_Init
056A           1635   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:349: JDYInit();
056A 120000    1636            lcall   _JDYInit
056D           1637   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:359: while(1){
056D           1638   L024002?:
056D           1639   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:361: RXData();
056D 120000    1640            lcall   _RXData
0570           1641   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:362: SBUF1 = 0;
0570 759200    1642            mov     _SBUF1,#0x00
0573           1643   ;        C:\UBC\SECOND YEAR\ELEC 291\Project 2\ELEC291Project2\EFM8\Robot\main.c:364: inductance++;
0573 7401      1644            mov     a,#0x01
0575 25B8      1645            add     a,_inductance
0577 F5B8      1646            mov     _inductance,a
0579 E4        1647            clr     a
057A 35B9      1648            addc    a,(_inductance + 1)
057C F5B9      1649            mov     (_inductance + 1),a
057E 8000      1650            sjmp    L024002?
0580           1651            rseg R_CSEG
0580           1652   
0000           1653            rseg R_XINIT
0000           1654   
0000           1655            rseg R_CONST
0000           1656   __str_0:
0000 1B        1657            db 0x1B
0001 5B324A    1658            db '[2J'
0004 00        1659            db 0x00
0005           1660   __str_1:
0005 436F6D6D  1661            db 'Command: %s'
     616E643A
     202573
0010 00        1662            db 0x00
0011           1663   __str_2:
0011 52657370  1664            db 'Response: %s'
     6F6E7365
     3A202573
001D 0D        1665            db 0x0D
001E 0A        1666            db 0x0A
001F 00        1667            db 0x00
0020           1668   __str_3:
0020 41542B44  1669            db 'AT+DVIDAFAF'
     56494441
     464146
002B 0D        1670            db 0x0D
002C 0A        1671            db 0x0A
002D 00        1672            db 0x00
002E           1673   __str_4:
002E 41542B52  1674            db 'AT+RFIDFFBB'
     46494446
     464242
0039 0D        1675            db 0x0D
003A 0A        1676            db 0x0A
003B 00        1677            db 0x00
003C           1678   __str_5:
003C 41542B56  1679            db 'AT+VER'
     4552
0042 0D        1680            db 0x0D
0043 0A        1681            db 0x0A
0044 00        1682            db 0x00
0045           1683   __str_6:
0045 41542B42  1684            db 'AT+BAUD'
     415544
004C 0D        1685            db 0x0D
004D 0A        1686            db 0x0A
004E 00        1687            db 0x00
004F           1688   __str_7:
004F 41542B52  1689            db 'AT+RFID'
     464944
0056 0D        1690            db 0x0D
0057 0A        1691            db 0x0A
0058 00        1692            db 0x00
0059           1693   __str_8:
0059 41542B44  1694            db 'AT+DVID'
     564944
0060 0D        1695            db 0x0D
0061 0A        1696            db 0x0A
0062 00        1697            db 0x00
0063           1698   __str_9:
0063 41542B52  1699            db 'AT+RFC'
     4643
0069 0D        1700            db 0x0D
006A 0A        1701            db 0x0A
006B 00        1702            db 0x00
006C           1703   __str_10:
006C 41542B50  1704            db 'AT+POWE'
     4F5745
0073 0D        1705            db 0x0D
0074 0A        1706            db 0x0A
0075 00        1707            db 0x00
0076           1708   __str_11:
0076 41542B43  1709            db 'AT+CLSS'
     4C5353
007D 0D        1710            db 0x0D
007E 0A        1711            db 0x0A
007F 00        1712            db 0x00
0080           1713   __str_12:
0080 252E3366  1714            db '%.3f'
0084 00        1715            db 0x00
0085           1716   __str_13:
0085 257320    1717            db '%s '
0088 0D        1718            db 0x0D
0089 0A        1719            db 0x0A
008A 00        1720            db 0x00
008B           1721   __str_14:
008B 2573      1722            db '%s'
008D 0D        1723            db 0x0D
008E 0A        1724            db 0x0A
008F 00        1725            db 0x00
0090           1726   __str_15:
0090 2564      1727            db '%d'
0092 00        1728            db 0x00
0093           1729   
0003           1730            CSEG
0003           1731   
0003           1732   end
